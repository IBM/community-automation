---
### "ansible_architecture": "s390x",
### "ansible_architecture": "ppc64le",
### "ansible_architecture": "x86_64",
### "ansible_architecture": "chrp", --- AIX

- name: Check if imcl installed as a prereq
  stat:
    path: "{{ install_base }}/IM/eclipse/tools/imcl"
  changed_when: false
  failed_when: false

- set_fact:
   archive_name_match: 'agent.installer.linux.gtk.x86_64_{{ im_archive_driver }}.zip'
  when:
  - ansible_architecture == 'x86_64'
  - ansible_system == 'Linux'
- set_fact:
    archive_name_match: 'agent.installer.linux.gtk.ppc64le_{{ im_archive_driver }}.zip'
  when:
  - ansible_architecture == 'ppc64le'
  - ansible_system == 'Linux'
- set_fact:
    archive_name_match: 'agent.installer.win32.win32.x86_64_{{ im_archive_driver }}.zip'
    cygwin: '/cygdrive/c/cygwin64'
  when:
  - ansible_architecture == 'x86_64'
  - ansible_system == 'Windows' or 'CYG' in ansible_system
- set_fact:
    archive_name_match: 'agent.installer.linux.gtk.s390x_{{ im_archive_driver }}.zip'
  when:
  - ansible_architecture == 's390x'
  - ansible_system == 'Linux'
- set_fact:
    archive_name_match: 'agent.installer.aix.gtk.ppc64_{{ im_archive_driver }}.zip'
  when:
  - ansible_architecture == 'chrp'
- set_fact:
    archive_name_match: 'agent.installer.os400.motif.ppc_{{ im_archive_driver }}.zip'
  when:
  - ansible_system == 'OS400'

- name: as400 softlinks
  when: ansible_system == 'OS400'
  block:
  - name: check if softlinks zip/unzip/zipinfo exist on as400
    stat:
     path: "/QOpenSys/usr/bin/zipinfo"
    register: issoftlinks
  - name: softlink the zip/zipinfo/unzip into default path
    when: issoftlinks.stat.exists == False
    shell: |
      ln -s /QOpenSys/pkgs/bin/zipinfo /QOpenSys/usr/bin/zipinfo 
      ln -s /QOpenSys/pkgs/bin/zip /QOpenSys/usr/bin/zip 
      ln -s /QOpenSys/pkgs/bin/unzip /QOpenSys/usr/bin/unzip

- name: Temp im install dir
  file:
   path: "{{ install_base }}/im_install"
   state: directory

- name: Clean up previous ibm_im_responsefile.xml 
  ansible.builtin.file:
    path: "{{ install_base }}/im_install/ibm_im_responsefile.xml"
    state: absent

- name: Copy ibm_im_responsefile.xml template
  template:
   src: ibm_im_responsefile.xml.j2
   dest: "{{ install_base }}/im_install/ibm_im_responsefile.xml"

- name: What is install_base set to
  debug: 
   msg: "{{ install_base }}"

- name: Get im archive
  get_url:
   url: "{{ im_archive }}/{{ archive_name_match }}"
   dest: /tmp/im.zip
   url_username: "{{ gsa_user }}"
   url_password: "{{ gsa_pass }}"
   mode: '0755'

- name: Unarchive im.zip
  unarchive:
   src: /tmp/im.zip
   dest: "{{ install_base }}/im_install"
   remote_src: True

- name: Clean up im.zip
  ansible.builtin.file:
    path: /tmp/im.zip
    state: absent

# default install location: ~/IBM/InstallationManager/eclipse/tools
# tools command: ~/IBM/InstallationManager/eclipse/tools/imcl
- name: Run the install ./userinstc -acceptLicense -accessRights nonAdmin -input ibm_im_responsefile.xml
  shell: './userinstc -acceptLicense -accessRights nonAdmin -input ibm_im_responsefile.xml'
  args:
    chdir: "{{ install_base }}/im_install"
  register: userinstcOutput
    
- name: Userinstc output
  debug: 
   msg: "{{ userinstcOutput.stdout_lines }}"

- name: Clean up im_install temp repo
  ansible.builtin.file:
    path: "{{ install_base }}/im_install"
    state: absent

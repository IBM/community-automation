---
- name: Configure cc PenTest 
  tags: configure_cc_pentest 
  block:
  - name: check if liberty is installed
    stat:
      path: "{{ install_base }}/{{ liberty_dir }}/bin/server"
    register: isliberty
    failed_when: isliberty.stat.exists == False

  - name: liberty server directories
    file:
      path: '{{ item }}'
      state: directory
      recurse: yes
    with_items:
    - "{{ wlp_usr_dir }}/servers/{{ cc_server }}/apps"
    - "{{ wlp_usr_dir }}/servers/{{ cc_server }}/resources"
    - "{{ wlp_usr_dir }}/servers/{{ cc_server }}/resources/derby"
    - "{{ wlp_usr_dir }}/servers/{{ cc_server }}/resources/derby/derby_jars"  
    - "{{ wlp_usr_dir }}/servers/{{ cc_server }}/dropins"
    - "{{ wlp_usr_dir }}/servers/{{ cc_server }}/pentest_delete"
    - "{{ wlp_usr_dir }}/servers/{{ cc_server }}/pentest_load"

  - name: copy cc server server.xml template
    template:
     src: "{{ cc_server }}.xml.j2"  
     dest: "{{ wlp_usr_dir }}/servers/{{ cc_server }}/server.xml"

  - name: copy basicauth.war 
    copy:
      src: "{{ sec_app }}" # files/basicauth.war 
      dest: "{{ wlp_usr_dir }}/servers/{{ cc_server }}/apps/basicauth.war"
      mode: '0755'

  - name: copy javaee8 batchSecurity.war 
    copy:
      src: "{{ batch_ee8 }}" # files/batch_javaee8_war/batchSecurity.war  
      dest: "{{ wlp_usr_dir }}/servers/{{ cc_server }}/dropins/batchSecurity.war"
      mode: '0755'

  - name: copy derby_jars.zip
    copy:
      src: "{{ derby_lib }}" # files/derby_jars.zip  
      dest: "{{ wlp_usr_dir }}/servers/{{ cc_server }}/resources/derby/derby_jars.zip"
      mode: '0755'
 
  - name: unzip derby_jars.zip
    command:
      cmd: "unzip {{ wlp_usr_dir }}/servers/{{ cc_server }}/resources/derby/derby_jars.zip -d {{ wlp_usr_dir }}/servers/{{ cc_server }}/resources/derby"
    register: cmdOutput
    failed_when: ( cmdOutput.rc not in [ 0, 1 ] )

  - debug:
     msg: '{{ cmdOutput.stdout_lines }}'
      
  - name: copy createOAuthTables.sql
    copy:
      src: files/createOAuthTables.sql
      dest: "{{ wlp_usr_dir }}/servers/{{ cc_server }}/resources/derby/createOAuthTables.sql"
      mode: '0755'

  - name: copy test*.txt
    copy:
      src: "files/{{ item }}"
      dest: "{{ wlp_usr_dir }}/servers/{{ cc_server }}/pentest_delete/{{ item }}"
      mode: '0755'
    with_items:
    - test1.txt
    - test2.txt
    - test3.txt
    - test4.txt
    - test5.txt

  - name: copy fileload.txt
    copy:
      src: files/fileload.txt
      dest: "{{ wlp_usr_dir }}/servers/{{ cc_server }}/pentest_load/fileload.txt"
      mode: '0755'

  - name: copy com.ibm.websphere.appserver.openidConnectServer-1.0.zip
    # temp solution for https://github.ibm.com/websphere/WS-CD-Open/issues/27465
    copy:
      src: files/com.ibm.websphere.appserver.openidConnectServer-1.0.zip
      dest: "{{ install_base }}/{{ liberty_dir }}/lib/features/icons/com.ibm.websphere.appserver.openidConnectServer-1.0.zip"
      mode: '0755'

  - name: unzip com.ibm.websphere.appserver.openidConnectServer-1.0.zip 
    command:
      cmd: "unzip {{ install_base }}/{{ liberty_dir }}/lib/features/icons/com.ibm.websphere.appserver.openidConnectServer-1.0.zip -d {{ install_base }}/{{ liberty_dir }}/lib/features/icons" 
    register: cmdOutput
    failed_when: ( cmdOutput.rc not in [ 0, 1 ] )

  - debug:
     msg: '{{ cmdOutput.stdout_lines }}'

  - name: add server.env OIDC_CLIENT_REDIRECT
    lineinfile:
      path: "{{ wlp_usr_dir }}/servers/{{ cc_server }}/server.env"
      regexp: 'OIDC_CLIENT_REDIRECT'
      line: 'OIDC_CLIENT_REDIRECT=https://{{ s1_hostname }}:9443'

  - name: add server.env HOST_ALIAS
    lineinfile:
      path: "{{ wlp_usr_dir }}/servers/{{ cc_server }}/server.env"
      regexp: 'HOST_ALIAS'
      line: 'HOST_ALIAS={{ ansible_fqdn }}'


  - name: comment out quickStartSecurity configuration in controller.xml
    lineinfile:
      path: "{{ wlp_usr_dir }}/servers/{{ cc_server }}/controller.xml"
      regexp: '<quickStartSecurity userName="admin" userPassword="adminpwd" />'
      line: '<!-- pen test using user basic registry from server.xml <quickStartSecurity userName="admin" userPassword="adminpwd" /> -->'

  - name: create derby db tables for oidc toools 
    command:
      cmd: "{{ wlp_cmd }} {{install_base }}/{{ liberty_dir }}/{{ pent_java_dir }}/bin/java -jar {{ wlp_usr_dir }}/servers/{{ cc_server }}/resources/derby/derby_jars/derbyrun.jar ij {{ wlp_usr_dir }}/servers/{{ cc_server }}/resources/derby/createOAuthTables.sql"
    register: cmdOutput
    failed_when: ( cmdOutput.rc not in [ 0, 1 ] )

  - debug:
     msg: '{{ cmdOutput.stdout_lines }}'

  - name: Stop Liberty Server 
    command:
      cmd: "{{ wlp_cmd }} {{install_base }}/{{ liberty_dir }}/bin/server stop {{ cc_server }}"
    register: cmdOutput
    failed_when: ( cmdOutput.rc not in [ 0, 1 ] )

  - debug:
     msg: '{{ cmdOutput.stdout_lines }}'

     # must use nohup else the server stops after the controlling process exits
  - name: Start Liberty Server 
    command:
      cmd: "{{ wlp_nohup }} {{ wlp_cmd }} {{install_base }}/{{ liberty_dir }}/bin/server start {{ cc_server }} --clean"
    register: cmdOutput
    failed_when: ( cmdOutput.rc not in [ 0, 1 ] )

  - debug:
     msg: '{{ cmdOutput.stdout_lines }}'

  - name: check server status 
    command:
      cmd: "{{ wlp_cmd }} {{install_base }}/{{ liberty_dir }}/bin/server status {{ cc_server }}"
    register: cmdOutput
    failed_when: ( cmdOutput.rc not in [ 0, 1 ] )

  - debug:
     msg: '{{ cmdOutput.stdout_lines }}'

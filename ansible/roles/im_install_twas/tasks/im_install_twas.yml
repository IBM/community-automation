---
### "ansible_architecture": "s390x",
### "ansible_architecture": "ppc64le",
### "ansible_architecture": "x86_64",
### "ansible_architecture": "chrp", --- AIX

- name: Install
  tags: install 
  block:
  - name: Check if imcl installed as a prereq
    ansible.builtin.stat:
      path: "{{ install_base }}/IM/eclipse/tools/imcl"
    register: isimcl
    failed_when: isimcl.stat.exists == False

  - name: Copy im_twas.xml template
    ansible.builtin.template:
      src: "im_twas_{{ twas_release }}.xml.j2"
      dest: "im_twas.xml"

     #  - name:  stop any running servers
     #    ignore_errors: true
     #    shell: "{{install_base }}/{{ liberty_dir }}/bin/server stop {{ item }}"
     #    register: stopOutput
     #    failed_when: ( stopOutput.rc not in [ 0, 2, 23, 127 ] )
     #    with_items:
     #    - "{{ wl_server }}"
     #    - "{{ cc_server }}"

   # blindly try fuser ( linux )
  - name: Blindly try fuser ( linux )
    ignore_errors: true
    shell: "fuser -k {{install_base }}/{{ twas_dir }}"
    register: killOutput
    failed_when: ( killOutput.rc not in [ 0, 1, 2, 127 ] )
    changed_when: false
    when: ansible_system is not search('CYG')

  - name: Blindly try kill ( windoze )
    ignore_errors: true
    ansible.builtin.shell: "ps -W|grep java|awk '{print $1}'|xargs kill -f"
    register: killOutput
    failed_when: ( killOutput.rc not in [ 0, 123 ] )
    changed_when: false
    when:
      - ansible_system == 'Windows' or 'CYG' in ansible_system

  - name: Uninstall twas
    ansible.builtin.shell: "{{ install_base }}/IM/eclipse/tools/imcl uninstall {{ im_twas_package[twas_release] }}"
    register: uninstallOutput
    failed_when: ( uninstallOutput.rc not in [ 0, 1 ] )
    
  - name: Uninstall twas output
    ansible.builtin.debug: 
      msg: "{{ uninstallOutput.stdout_lines }}"

  - name: Uninstall AppClient
    ansible.builtin.shell: "{{ install_base }}/IM/eclipse/tools/imcl uninstall {{ im_appclient_package[twas_release] }}"
    register: uninstallOutput
    failed_when: ( uninstallOutput.rc not in [ 0, 1 ] )
    
  - name: Uninstall AppClient output
    ansible.builtin.debug: 
      msg: "{{ uninstallOutput.stdout_lines }}"

  - name: Remove previous twas appclient dir
    ansible.builtin.file:
      path: "{{ item }}"
      state: absent
    with_items:
      - "{{ install_base }}/{{ twas_dir }}"
      - "{{ install_base }}/{{ app_dir }}"

  - name: Generate secureStorageFile.store
    ansible.builtin.shell: "{{ install_base }}/IM/eclipse/tools/imutilsc saveCredential -url https://rtpgsa.ibm.com -userName {{ gsa_user }} -userPassword '{{ gsa_pass }}' -secureStorageFile {{ install_base }}/IM/secureStorageFile.store"

    #  this command is hanging on the pok zlinux boxes for some crazy networking reason
    #  this hangs too: curl -Lk http://www.ibm.com/software/repositorymanager
    #  which works on rtp hosts
    #  - name:  generate external ibm secureStorageFile.store
    #    shell: "{{ install_base }}/IM/eclipse/tools/imutilsc saveCredential -url http://www.ibm.com/software/repositorymanager  -userName {{ external_ibmuser }} -userPassword '{{ external_ibmpass }}' -secureStorageFile {{ install_base }}/IM/secureStorageFile.store"

  - name: Install tWAS
    ansible.builtin.shell: "{{ install_base }}/IM/eclipse/tools/imcl input ./im_twas.xml -acceptLicense -secureStorageFile {{ install_base }}/IM/secureStorageFile.store"
    register: installOutput

  - name: InstallOutput
    ansible.builtin.debug: 
      msg: "{{ installOutput.stdout_lines }}"

  - name: ListInstalledPackages
    ansible.builtin.shell: "{{ install_base }}/IM/eclipse/tools/imcl listInstalledPackages -long"
    register: packageOutput
  
  - name: PackageOutput
    ansible.builtin.debug: 
      msg: "{{ packageOutput.stdout_lines }}"

- name: Versions
  tags: version 
  block:
  - name: tWAS version
    ansible.builtin.shell: "{{ install_base }}/{{ twas_dir }}/bin/versionInfo{{ ext }} -ifixDetail"
    register: twasVersionOutput

  - name: Output twasVersionOutput
    ansible.builtin.debug: 
      msg: "{{ twasVersionOutput.stdout_lines }}"

  - name: AppClient version
    ansible.builtin.shell: "{{ install_base }}/{{ app_dir }}/bin/versionInfo{{ ext }} -ifixDetail"
    register: appVersionOutput

  - name: Output appVersionOutput
    ansible.builtin.debug:
      msg: "{{ appVersionOutput.stdout_lines }}"

---
- name: check if imcl installed as a prereq
  ansible.builtin.stat:
    path: "{{ install_ihs_base }}/IM/eclipse/tools/imcl"
  register: isimcl
  failed_when: isimcl.stat.exists == False

- name: Windoze?
  set_fact:
    install_ihs_base_win: 'c:\cygwin'
  when:
  - ansible_architecture == 'x86_64'
  - ansible_system == 'Windows' or 'CYG' in ansible_system

# - name: Any var/ibm/InstallationManager/installRegistry.xml
#   ansible.builtin.stat:
#     path: var/ibm/InstallationManager/installRegistry.xml
#   register: isinstallRegistry

# - name: Any var/ibm/InstallationManager/installed.xml
#   ansible.builtin.stat:
#     path: var/ibm/InstallationManager/installed.xml
#   register: isinstalled

# - name: Adjust any of the existing profile ids to match the ansible ( autowas adjustment )
#   block:
#     - name: Adjust the HTTPServer profile id
#       ansible.builtin.replace:
#         path: var/ibm/InstallationManager/installRegistry.xml
#         regexp: "{{ regex_profile_id_ibm_http_server }}.+?(?=')"
#         replace: "{{ regex_profile_id_ibm_http_server }}"
#         backup: true
#     - name: Adjust the HTTPServer Plugins profile id
#       ansible.builtin.replace:
#         path: var/ibm/InstallationManager/installRegistry.xml
#         regexp: "{{ regex_profile_id_ibm_http_plugin }}.+?(?=')"
#         replace: "{{ regex_profile_id_ibm_http_plugin }}"
#     - name: Adjust the WCT profile id
#       ansible.builtin.replace:
#         path: var/ibm/InstallationManager/installRegistry.xml
#         regexp: "{{ regex_profile_id_ibm_wct_tools }}.+?(?=')"
#         replace: "{{ regex_profile_id_ibm_wct_tools }}"

#     - name: Adjust the HTTPServer context id
#       ansible.builtin.replace:
#         path: var/ibm/InstallationManager/installRegistry.xml
#         regexp: "{{ regex_installContext_id_ibm_http_server }}.+?(?=.root')"
#         replace: '{{ regex_installContext_id_ibm_http_server }}'
#     - name: Adjust the HTTPServer Plugins context id
#       ansible.builtin.replace:
#         path: var/ibm/InstallationManager/installRegistry.xml
#         regexp: "{{ regex_installContext_id_ibm_http_plugin }}.+?(?=.root')"
#         replace: '{{ regex_installContext_id_ibm_http_plugin }}'
#     - name: Adjust the WCT context id
#       ansible.builtin.replace:
#         path: var/ibm/InstallationManager/installRegistry.xml
#         regexp: "{{ regex_installContext_id_ibm_wct_tools }}.+?(?=.root')"
#         replace: '{{ regex_installContext_id_ibm_wct_tools }}'
#   when: isinstallRegistry.stat.exists

# - name: Adjust any of the existing location ids to match the ansible ( autowas adjustment )
#   block:
#     - name: Adjust the HTTPServer location id
#       ansible.builtin.replace:
#         path: var/ibm/InstallationManager/installed.xml
#         regexp: "{{ regex_location_id_ibm_http_server }}.+?(?=')"
#         replace: "{{ regex_location_id_ibm_http_server }}"
#         backup: true
#     - name: Adjust the HTTPServer Plugins location id
#       ansible.builtin.replace:
#         path: var/ibm/InstallationManager/installed.xml
#         regexp: "{{ regex_location_id_ibm_http_plugin }}.+?(?=')"
#         replace: "{{ regex_location_id_ibm_http_plugin }}"
#     - name: Adjust the WCT location id
#       ansible.builtin.replace:
#         path: var/ibm/InstallationManager/installed.xml
#         regexp: "{{ regex_location_id_ibm_wct_tools }}.+?(?=')"
#         replace: "{{ regex_location_id_ibm_wct_tools }}"
#   when: isinstalled.stat.exists

- name: copy ihs_plugin.xml template
  ansible.builtin.template:
    src: "im_http_plugin_{{ twas_release }}.xml.j2"
    dest: "im_http_plugin.xml"

- name: Remove previous secureStorageFile.store ( IM 1.9.x -> 1.10 java11 )
  ansible.builtin.file:
    path: "{{ install_ihs_base }}/IM/secureStorageFile.store"
    state: absent

- name:  generate secureStorageFile.store
  ansible.builtin.shell: "{{ install_ihs_base }}/IM/eclipse/tools/imutilsc saveCredential -url https://rtpgsa.ibm.com -userName {{ gsa_user }} -userPassword {{ gsa_pass }} -secureStorageFile {{ install_ihs_base }}/IM/secureStorageFile.store"

- name:  install http plugins wct
  ansible.builtin.shell: "{{ install_ihs_base }}/IM/eclipse/tools/imcl input ./im_http_plugin.xml -acceptLicense -secureStorageFile {{ install_ihs_base }}/IM/secureStorageFile.store"
  register: installOutput

- name: installOutput
  ansible.builtin.debug: 
    msg: "{{ installOutput.stdout_lines }}"

# pure hack to get zLinux s390x WCT 32bit java to use 64bit java
- name: tWAS855 zLinux s390x WCT super hack
  ansible.builtin.shell: "rm -rf {{ install_ihs_base }}/{{ wct_dir }}/java/jre ; ln -s {{ install_ihs_base }}/{{ plugin_dir }}/java/jre {{ install_ihs_base }}/WCT/java/jre"
  when:
  - ansible_architecture == 's390x'
  - twas_release == 'WAS855'

- name: New install configuration
  block:
  - name: copy https_conf template
    ansible.builtin.template:
      src: https_conf_{{ twas_release }}.j2
      dest: "https_conf"

  #https://www.ibm.com/docs/en/was/9.0.5?topic=cwspi-configuring-web-server-plug-in-using-pct-tool
  - name: copy wct_definition.xml template
    ansible.builtin.template:
      src: wct_definition.xml.j2
      dest: "wct_definition.xml"

  - name: copy ihsserverkey.sh template
    ansible.builtin.template:
      src: ihsserverkey.sh.j2
      dest: "{{ install_ihs_base }}/{{ http_dir }}/conf/ihsserverkey.sh"
      mode: 0755

  - name:  Check for any old WCT IHS/Plugin configs
    ansible.builtin.shell: "{{install_ihs_base }}/{{ wct_dir }}/WCT/wctcmd.sh -tool pct -listDefinitionLocations"
    register: isPluginConfigured

  - name: WCT/WCT/wctcmd.sh -tool pct -listDefinitionLocations output
    ansible.builtin.debug:
      msg: "{{ isPluginConfigured.stdout_lines }}"

  - name:  Remove the old WCT IHS/Plugin configs
    ansible.builtin.shell: "{{install_ihs_base }}/{{ wct_dir }}/WCT/wctcmd.sh -tool pct -removeDefinitionLocation -defLocPathname {{ install_ihs_base }}/{{ plugin_dir }} -defLocName ihsWebServer"
    register: isPluginConfigured
    when: 
      - isPluginConfigured.rc == 0
      - isPluginConfigured.stdout is not search('No definition')

  - name:  configure plugin
    ansible.builtin.shell: "{{install_ihs_base }}/{{ wct_dir }}/WCT/wctcmd.sh -tool pct -defLocPathname {{ install_ihs_base }}/{{ plugin_dir }} -defLocName ihsWebServer -createDefinition -response wct_definition.xml -importDefinitionLocation"
    register: configurepluginOutput

  - name: configurepluginOutput
    ansible.builtin.debug:
      msg: "{{ configurepluginOutput.stdout_lines }}"

  - name: Insert/Update https config
    ansible.builtin.blockinfile:
      path: "{{ install_ihs_base }}/{{ http_dir }}/conf/httpd.conf"
      block: |
        LoadModule ibm_ssl_module modules/mod_ibm_ssl.so
        Listen {{ ihs_https_port }}
        SSLCheckCertificateExpiration 30
        <VirtualHost *:{{ ihs_https_port }}>
        ServerName {{ ansible_fqdn }}
        SSLEnable
        Header always set Strict-Transport-Security "max-age=31536000; includeSubDomains; preload"
        </VirtualHost>
        KeyFile {{ install_ihs_base }}/{{ http_dir }}/conf/ihsserverkey.kdb
  
  - name: IHS disable access_log
    ansible.builtin.lineinfile: 
      dest: "{{ install_ihs_base }}/{{ http_dir }}/conf/httpd.conf"
      search_string: 'CustomLog logs/access_log common'
      line: '# CustomLog logs/access_log common'
      state: present

  - name: IHS Header for 855x
    ansible.builtin.lineinfile: 
      dest: "{{ install_ihs_base }}/{{ http_dir }}/conf/httpd.conf"
      state: absent
      regexp: "Header always set Strict-Transport-Security"
    when: twas_release == 'WAS855'

  - name: update admin.config @@AdminPort@@
    ansible.builtin.replace:
      path: "{{ install_ihs_base }}/{{ http_dir }}/conf/admin.conf"
      regexp: '@@AdminPort@@'
      replace: "{{ ihs_admin_port }}"

  - name: enable server-status
    ansible.builtin.replace:
      path: "{{ install_ihs_base }}/{{ http_dir }}/conf/httpd.conf"
      regexp: '    Require all denied'
      after: '    SetHandler server-status'
      before: 'To allow access from a specific IP:'
      replace: '#    Require all denied'

  - name:  configure plugin
    ansible.builtin.shell: "{{install_ihs_base }}/{{ http_dir }}/conf/ihsserverkey.sh"
    args:
      chdir: "{{ install_ihs_base }}/{{ http_dir }}/conf"
    register: createihsseververkdbOutput

  - name: checkreateihsseververkdbOutput
    ansible.builtin.debug:
      msg: "{{ createihsseververkdbOutput.stdout_lines }}"

  - name:  ListInstalledPackages
    ansible.builtin.shell: "{{ install_ihs_base }}/IM/eclipse/tools/imcl listInstalledPackages -long"
    register: packageOutput

  - name: PackageOutput
    ansible.builtin.debug:
      msg: "{{ packageOutput.stdout_lines }}"

  - name:  start httpd
    ansible.builtin.shell: "{{install_ihs_base }}/{{ http_dir }}/bin/apachectl start"
    register: starthttpdOutput

  - name: starthttpdOutput
    ansible.builtin.debug:
      msg: "{{ starthttpdOutput.stdout_lines }}"

  - name:  start adminctl
    ansible.builtin.shell: "{{install_ihs_base }}/{{ http_dir }}/bin/adminctl start "
    register: startadminctlOutput

  - name: startadminctlOutput
    ansible.builtin.debug:
      msg: "{{ startadminctlOutput.stdout_lines }}"

  - name: Check server-status
    ansible.builtin.uri:
      url: "https://localhost:{{ ihs_https_port }}"
      return_content: no
      validate_certs: false
    register: isIHSup

  - name: Is IHS running output
    ansible.builtin.debug: 
      msg: "{{ isIHSup }}"
  when:
  - ihs_upgrade_only is not defined

- name: HTTPServer version
  ansible.builtin.shell: "{{install_ihs_base }}/{{ http_dir }}/bin/versionInfo.sh -ifixDetail"
  register: HTTPServerVersionOutput

- name: HTTPServerVersionOutput
  ansible.builtin.debug: 
    msg: "{{ HTTPServerVersionOutput.stdout_lines }}"
  failed_when: ihs_im_driver not in HTTPServerVersionOutput.stdout

- name: Plugin version
  ansible.builtin.shell: "{{install_ihs_base }}/{{ plugin_dir }}/bin/versionInfo.sh -ifixDetail"
  register: PluginVersionOutput

- name: PluginVersionOutput
  ansible.builtin.debug: 
    msg: "{{ PluginVersionOutput.stdout_lines }}"
  failed_when: ihs_im_driver not in PluginVersionOutput.stdout

- name: WCT version
  ansible.builtin.shell: "{{install_ihs_base }}/{{ wct_dir }}/bin/versionInfo.sh -ifixDetail"
  register: WCTVersionOutput

- name: WCTVersionOutput
  ansible.builtin.debug:
    msg: "{{ WCTVersionOutput.stdout_lines }}"
  failed_when: ihs_im_driver not in WCTVersionOutput.stdout

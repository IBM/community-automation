---
- name: clusterNameheck if imcl installed as a prereq
  ansible.builtin.stat:
    path: "{{ install_ihs_base }}/IM/eclipse/tools/imcl"
  register: isimcl
  failed_when: isimcl.stat.exists == False

- name: Copy ihs_plugin.xml template
  ansible.builtin.template:
    src: "im_http_plugin_{{ twas_release }}.xml.j2"
    dest: "im_http_plugin.xml"

- name: Remove previous secureStorageFile.store ( IM 1.9.x -> 1.10 java11 )
  ansible.builtin.file:
    path: "{{ install_ihs_base }}/IM/secureStorageFile.store"
    state: absent

- name: Generate secureStorageFile.store
  ansible.builtin.shell: "{{ install_ihs_base }}/IM/eclipse/tools/imutilsc saveCredential -url https://rtpgsa.ibm.com -userName {{ gsa_user }} -userPassword {{ gsa_pass }} -secureStorageFile {{ install_ihs_base }}/IM/secureStorageFile.store"

- name:  install http plugins wct
  ansible.builtin.shell: "{{ install_ihs_base }}/IM/eclipse/tools/imcl input ./im_http_plugin.xml -acceptLicense -secureStorageFile {{ install_ihs_base }}/IM/secureStorageFile.store"
  register: installOutput

- name: InstallOutput
  ansible.builtin.debug: 
    msg: "{{ installOutput.stdout_lines }}"

# pure hack to get zLinux s390x WCT 32bit java to use 64bit java
- name: Hack tWAS855 zLinux s390x WCT super hack
  ansible.builtin.shell: "rm -rf {{ install_ihs_base }}/{{ wct_dir }}/java/jre ; ln -s {{ install_ihs_base }}/{{ plugin_dir }}/java/jre {{ install_ihs_base }}/WCT/java/jre"
  when:
    - ansible_architecture == 's390x'
    - twas_release == 'WAS855'

- name: New install configuration
  when:
    - ihs_upgrade_only is not defined
  block:
  - name: Copy https_conf template
    ansible.builtin.template:
      src: https_conf_{{ twas_release }}.j2
      dest: "https_conf"

  #https://www.ibm.com/docs/en/was/9.0.5?topic=cwspi-configuring-web-server-plug-in-using-pct-tool
  - name: Copy wct_definition.xml template
    ansible.builtin.template:
      src: wct_definition.xml.j2
      dest: "wct_definition.xml"

  - name: Copy ihsserverkey{{ ext }} template
    ansible.builtin.template:
      src: ihsserverkey{{ ext }}.j2
      dest: "{{ install_ihs_base }}/{{ http_dir }}/conf/ihsserverkey{{ ext }}"
      mode: 0755

  - name:  Check for any old WCT IHS/Plugin configs
    ansible.builtin.shell: "{{ install_ihs_base }}/{{ wct_dir }}/WCT/wctcmd{{ ext }} -tool pct -listDefinitionLocations"
    register: isPluginConfigured

  - name: WCT/WCT/wctcmd{{ ext }} -tool pct -listDefinitionLocations output
    ansible.builtin.debug:
      msg: "{{ isPluginConfigured.stdout_lines }}"

  - name: Remove the old WCT IHS/Plugin configs
    ansible.builtin.shell: "{{ install_ihs_base }}/{{ wct_dir }}/WCT/wctcmd{{ ext }} -tool pct -removeDefinitionLocation -defLocPathname {{ cygwin }}{{ install_ihs_base }}/{{ plugin_dir }} -defLocName ihsWebServer"
    register: isPluginConfigured
    when:
      - isPluginConfigured.rc == 0
      - isPluginConfigured.stdout is not search('No definition')

  - name: Convert forward slash to back slash for windoze
    when: ansible_system == 'Windows' or 'CYG' in ansible_system
    ansible.builtin.replace:
      path:  wct_definition.xml
      regexp: '\/'
      replace: '\\'

  - name: Configure plugin
    ansible.builtin.shell: "{{ install_ihs_base }}/{{ wct_dir }}/WCT/wctcmd{{ ext }} -tool pct -defLocPathname {{ cygwin }}{{ install_ihs_base }}/{{ plugin_dir }} -defLocName ihsWebServer -createDefinition -response wct_definition.xml -importDefinitionLocation"
    register: configurepluginOutput

  - name: ConfigurepluginOutput
    ansible.builtin.debug:
      msg: "{{ configurepluginOutput.stdout_lines }}"

  - name: Insert/Update https config
    ansible.builtin.blockinfile:
      path: "{{ install_ihs_base }}/{{ http_dir }}/conf/httpd.conf"
      block: |
        LoadModule ibm_ssl_module modules/mod_ibm_ssl.so
        Listen {{ ihs_https_port }}
        SSLCheckCertificateExpiration 30
        <VirtualHost *:{{ ihs_https_port }}>
        ServerName {{ ansible_fqdn }}
        SSLEnable
        Header always set Strict-Transport-Security "max-age=31536000; includeSubDomains; preload"
        </VirtualHost>
        KeyFile {{ install_ihs_base }}/{{ http_dir }}/conf/ihsserverkey.kdb

  - name: IHS disable access_log
    ansible.builtin.lineinfile: 
      dest: "{{ install_ihs_base }}/{{ http_dir }}/conf/httpd.conf"
      search_string: 'CustomLog logs/access_log common'
      line: '# CustomLog logs/access_log common'
      state: present

  - name: IHS Header for 855x
    ansible.builtin.lineinfile: 
      dest: "{{ install_ihs_base }}/{{ http_dir }}/conf/httpd.conf"
      state: absent
      regexp: "Header always set Strict-Transport-Security"
    when: twas_release == 'WAS855'

  - name: Update admin.config @@AdminPort@@
    ansible.builtin.replace:
      path: "{{ install_ihs_base }}/{{ http_dir }}/conf/admin.conf"
      regexp: '@@AdminPort@@'
      replace: "{{ ihs_admin_port }}"

  - name: Disable admin.config User otherwise must run as root
    ansible.builtin.replace:
      path: "{{ install_ihs_base }}/{{ http_dir }}/conf/admin.conf"
      regexp: '^User'
      replace: '#User'

  - name: Disable admin.config Group otherwise must run as root
    ansible.builtin.replace:
      path: "{{ install_ihs_base }}/{{ http_dir }}/conf/admin.conf"
      regexp: '^Group'
      replace: '#Group'

  - name: enable server-status
    ansible.builtin.replace:
      path: "{{ install_ihs_base }}/{{ http_dir }}/conf/httpd.conf"
      regexp: '    Require all denied'
      after: '    SetHandler server-status'
      before: 'To allow access from a specific IP:'
      replace: '#    Require all denied'

  - name: Configure plugin
    ansible.builtin.shell: "{{install_ihs_base }}/{{ http_dir }}/conf/ihsserverkey{{ ext }}"
    args:
      chdir: "{{ install_ihs_base }}/{{ http_dir }}/conf"
    register: createihsseververkdbOutput

  - name: CheckreateihsseververkdbOutput
    ansible.builtin.debug:
      msg: "{{ createihsseververkdbOutput.stdout_lines }}"

  - name:  ListInstalledPackages
    ansible.builtin.shell: "{{ install_ihs_base }}/IM/eclipse/tools/imcl listInstalledPackages -long"
    register: packageOutput

  - name: PackageOutput
    ansible.builtin.debug:
      msg: "{{ packageOutput.stdout_lines }}"

  - name: Unix http operations
    when: ansible_system is not search('CYG')
    block:
      - name: Start httpd ( *nix )
        ansible.builtin.shell: "{{install_ihs_base }}/{{ http_dir }}/bin/apachectl start"
        register: starthttpdOutput
      - name: StarthttpdOutput
        ansible.builtin.debug:
          msg: "{{ starthttpdOutput.stdout_lines }}"
      - name: Start adminctl
        ansible.builtin.shell: "{{install_ihs_base }}/{{ http_dir }}/bin/adminctl start "
        register: startadminctlOutput
      - name: StartadminctlOutput
        ansible.builtin.debug:
          msg: "{{ startadminctlOutput.stdout_lines }}"

  - name: Windoze http operations
    when: ansible_system == 'Windows' or 'CYG' in ansible_system
    block:
    - name: Windoze create c:/temp/logs
      ansible.builtin.file:
        path: "c:/temp/logs"
        state: directory

    - name: Windoze switch log dir to c:/temp/logs
      ansible.builtin.replace: 
        dest: "{{ install_ihs_base }}/{{ http_dir }}/conf/httpd.conf"
        regex: '^Log logs$'
        replace: 'Log c:/temp/logs'
        state: present

    - name: Windoze switch log dir to c:/temp/logs pid
      ansible.builtin.replace: 
        dest: "{{ install_ihs_base }}/{{ http_dir }}/conf/httpd.conf"
        regex: 'PidFile logs'
        replace: 'PidFile c:/temp/logs'
        state: present

    - name: Install httpd Windoze service
      ansible.builtin.shell: "{{ install_ihs_base }}/{{ http_dir }}/bin/apache -k install -n 'IBMHTTPServer' -f {{ cygwin }}{{ install_ihs_base }}/{{ http_dir }}/conf/httpd.conf"
      register: apache_k_install
    - name: Apache_k_install output
      ansible.builtin.debug:
        msg: "{{ apache_k_install.stdout_lines }}"

    ## Unable to find a simple command line option to allow user loginAsService, switch logs to c:/temp/logs
    # - name: Change Windoze service account
    #   ansible.builtin.shell: "sc config IBMHTTPServer obj='.\\{{ user_username }}' password={{ user_password }} type=own"
    #   register: sc_config
    # - name: Change Windoze service account output
    #   ansible.builtin.debug:
    #     msg: "{{ sc_config.stdout_lines }}"

    - name: Start apache -k start -n IBMHTTPServer
      ansible.builtin.shell: "{{ install_ihs_base }}/{{ http_dir }}/bin/apache -k start -n 'IBMHTTPServer'"
      register: starthttpdOutput
    - name: StarthttpdOutput
      ansible.builtin.debug:
        msg: "{{ starthttpdOutput.stdout_lines }}"

    - name: Windoze switch log dir to c:/temp/logs for admin
      ansible.builtin.replace: 
        dest: "{{ install_ihs_base }}/{{ http_dir }}/conf/admin.conf"
        regex: '^Log logs$'
        replace: 'Log c:/temp/logs'
        state: present

    - name: Windoze switch log dir to c:/temp/logs admin pid
      ansible.builtin.lineinfile: 
        dest: "{{ install_ihs_base }}/{{ http_dir }}/conf/admin.conf"
        regex: 'PidFile logs'
        replace: 'PidFile c:/temp/logs'
        state: present

    - name: Install httpd admin Windoze service
      ansible.builtin.shell: "{{ install_ihs_base }}/{{ http_dir }}/bin/apache -k install -n 'IBMAdminHTTPServer' -f {{ cygwin }}{{ install_ihs_base }}/{{ http_dir }}/conf/admin.conf"
      register: apache_k_admin_install
    - name: Apache_k_admin_install output
      ansible.builtin.debug:
        msg: "{{ apache_k_install.stdout_lines }}"

    # # Unable to find a simple command line option to allow user loginAsService, switch logs to c:/temp/logs
    # - name: Change Windoze service account admin
    #   ansible.builtin.shell: "sc config IBMAdminHTTPServer obj='.\\{{ user_username }}' password={{ user_password }} type=own"
    #   register: sc_config
    # - name: Change Windoze service account admin output
    #   ansible.builtin.debug:
    #     msg: "{{ sc_config.stdout_lines }}"

    - name: Start apache -k start -n IBMAdminHTTPServer
      ansible.builtin.shell: "{{ install_ihs_base }}/{{ http_dir }}/bin/apache -k start -n 'IBMAdminHTTPServer'"
      register: starthttpdOutput
    - name: StarthttpdOutput
      ansible.builtin.debug:
        msg: "{{ starthttpdOutput.stdout_lines }}"

  - name: Check server-status
    ansible.builtin.uri:
      url: "https://localhost:{{ ihs_https_port }}"
      return_content: no
      validate_certs: false
    register: isIHSup

  - name: Is IHS running output
    ansible.builtin.debug: 
      msg: "{{ isIHSup }}"


- name: HTTPServer version
  ansible.builtin.shell: "{{install_ihs_base }}/{{ http_dir }}/bin/versionInfo{{ ext }} -ifixDetail"
  register: HTTPServerVersionOutput

- name: HTTPServerVersionOutput
  ansible.builtin.debug: 
    msg: "{{ HTTPServerVersionOutput.stdout_lines }}"
  failed_when: ihs_im_driver not in HTTPServerVersionOutput.stdout

- name: Plugin version
  ansible.builtin.shell: "{{install_ihs_base }}/{{ plugin_dir }}/bin/versionInfo{{ ext }} -ifixDetail"
  register: PluginVersionOutput

- name: PluginVersionOutput
  ansible.builtin.debug: 
    msg: "{{ PluginVersionOutput.stdout_lines }}"
  failed_when: ihs_im_driver not in PluginVersionOutput.stdout

- name: WCT version
  ansible.builtin.shell: "{{install_ihs_base }}/{{ wct_dir }}/bin/versionInfo{{ ext }} -ifixDetail"
  register: WCTVersionOutput

- name: WCTVersionOutput
  ansible.builtin.debug:
    msg: "{{ WCTVersionOutput.stdout_lines }}"
  failed_when: ihs_im_driver not in WCTVersionOutput.stdout

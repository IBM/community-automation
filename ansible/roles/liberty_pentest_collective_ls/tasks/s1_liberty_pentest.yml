---
- name: Configure s1  PenTest 
  tags: configure_s1_pentest 
  block:
  - name: check if liberty is installed
    stat:
      path: "{{ install_base }}/{{ liberty_dir }}/bin/server"
    register: isliberty
    failed_when: isliberty.stat.exists == False

  - name: liberty server directories
    file:
      path: '{{ item }}'
      state: directory
      recurse: yes
    with_items:
    - "{{ wlp_usr_dir }}/servers/{{ wl_server }}/apps"
    - "{{ wlp_usr_dir }}/servers/{{ wl_server }}/resources"
    - "{{ wlp_usr_dir }}/servers/{{ wl_server }}/resources/derby"
    - "{{ wlp_usr_dir }}/servers/{{ wl_server }}/resources/derby/derby_jars"
    - "{{ wlp_usr_dir }}/servers/{{ wl_server }}/dropins"
    - "{{ wlp_usr_dir }}/servers/{{ wl_server }}/pentest_delete"
    - "{{ wlp_usr_dir }}/servers/{{ wl_server }}/pentest_load"

  - name: copy server1 server.xml template
    template:
     src: "{{ wl_server }}.xml.j2"  
     dest: "{{ wlp_usr_dir }}/servers/{{ wl_server }}/server.xml"
      
  - name: copy basicauth.war 
    copy:
      src: "{{ sec_app }}" # files/basicauth.war
      dest: "{{ wlp_usr_dir }}/servers/{{ wl_server }}/apps/basicauth.war"
      mode: '0755'

  - name: copy jakarta batchSecurity.war 
    copy:
      src: "{{ batch_jakarta }}" # files/batch_jakarta_war/batchSecurity.war   
      dest: "{{ wlp_usr_dir }}/servers/{{ wl_server }}/dropins/batchSecurity.war"
      mode: '0755'

  - name: copy derby_jars.zip
    copy:
      src: "{{ derby_lib }}" # files/derby_jars.zip  
      dest: "{{ wlp_usr_dir }}/servers/{{ wl_server }}/resources/derby/derby_jars.zip"
      mode: '0755'

  - name: unzip derby_jars.zip
    command:
      cmd: "unzip {{ wlp_usr_dir }}/servers/{{ wl_server }}/resources/derby/derby_jars.zip -d {{ wlp_usr_dir }}/servers/{{ wl_server }}/resources/derby"
        
    register: cmdOutput
    failed_when: ( cmdOutput.rc not in [ 0, 1 ] )

  - debug:
     msg: '{{ cmdOutput.stdout_lines }}'
    
  - name: copy test*.txt
    copy:
      src: "files/{{ item }}"
      dest: "{{ wlp_usr_dir }}/servers/{{ wl_server }}/pentest_delete/{{ item }}"
      mode: '0755'
    with_items:
    - test1.txt
    - test2.txt
    - test3.txt
    - test4.txt
    - test5.txt

  - name: copy fileload.txt
    copy:
      src: files/fileload.txt
      dest: "{{ wlp_usr_dir }}/servers/{{ wl_server }}/pentest_load/fileload.txt"
      mode: '0755'

  - name: add server.env OIDC_SERVER_DISCOVERY
    lineinfile:
      path: "{{ wlp_usr_dir }}/servers/{{ wl_server }}/server.env"
      regexp: 'OIDC_SERVER_DISCOVERY'
      line: 'OIDC_SERVER_DISCOVERY=https://{{ cc_hostname }}:9443'

  - name: add server.env cert_defaultKeyStore
    lineinfile:
      path: "{{ wlp_usr_dir }}/servers/{{ wl_server }}/server.env"
      regexp: 'cert_defaultKeyStore'
      line: 'cert_defaultKeyStore={{ wlp_usr_dir }}/shared/config/server2.der'

  - name: add server.env HOST_ALIAS
    lineinfile:
      path: "{{ wlp_usr_dir }}/servers/{{ wl_server }}/server.env"
      regexp: 'HOST_ALIAS'
      line: 'HOST_ALIAS={{ ansible_fqdn }}'

  - name: autoAcceptCertificates
    lineinfile:
      path: "{{ wlp_usr_dir }}/servers/{{ wl_server }}/server.env"
      regexp: 'autoAcceptCertificates'
      line: 'JVM_ARGS=-Dcom.ibm.websphere.collective.utility.autoAcceptCertificates=true'

  - name: Stop Liberty Server 
    command:
      cmd: "{{ wlp_cmd }} {{install_base }}/{{ liberty_dir }}/bin/server stop {{ wl_server }}"
    register: cmdOutput
    failed_when: ( cmdOutput.rc not in [ 0, 1 ] )

  - debug:
     msg: '{{ cmdOutput.stdout_lines }}'

     # must use nohup else the server stops after the controlling process exits
  - name: Start Liberty Server 
    command:
      cmd: "{{ wlp_nohup }} {{ wlp_cmd }} {{install_base }}/{{ liberty_dir }}/bin/server start {{ wl_server }} --clean"
    register: cmdOutput
    failed_when: ( cmdOutput.rc not in [ 0, 1 ] )

  - debug:
     msg: '{{ cmdOutput.stdout_lines }}'

  - name: check server status 
    command:
      cmd: "{{ wlp_cmd }} {{install_base }}/{{ liberty_dir }}/bin/server status {{ wl_server }}"
    register: cmdOutput
    failed_when: ( cmdOutput.rc not in [ 0, 1 ] )

  - debug:
     msg: '{{ cmdOutput.stdout_lines }}'

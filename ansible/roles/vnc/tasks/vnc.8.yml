---
- name: authorized_key
  authorized_key:
    user: "{{ ansible_user }}"
    state: present
    manage_dir: yes
    key: "{{ lookup('file', '~/.ssh/id_rsa.pub') }}"  

- block:
   - name: remove extraneous packages
     become: yes
     ignore_errors: yes
     dnf:
      name: "{{ packages }}"
      state: absent
      autoremove: yes
     vars:
      packages:
      - "adobe*"
      - "containers*"
      - "java*"
      - "samba*"
      - "valgrind*"
      - "tignervnc"

   - name: install the workstation group
     command: "dnf -y groupinstall 'Server with GUI'"
     args:
       warn: no
     register: manualdnf
     become: yes

   - name: install rhel packages
     become: yes
     dnf:
      name: "{{ packages }}"
      state: present
# the skip_broken is not being passed :(
      skip_broken: yes
     vars:
      packages:
      - 'python3'
      - 'tigervnc-server'
      - 'xorg-x11-fonts-Type1'
#      - '@workstation'

  when:
   - ansible_pkg_mgr == "dnf" 
   - ansible_distribution_major_version >= "8"

- name: prereq directories
  file:
    path: '{{ item }}'
    state: directory
    recurse: yes
  with_items:
  - ~/.vnc

# -depth 8 -geometry 1852x1100 macbook pro res
# session=gnome
# geometry=1852x1100 # 1852x1100 macbook pro res

- name: add vnc user
  lineinfile:
   path: "/etc/tigervnc/vncserver.users"
   state: present
   regexp: ':1='
   line: ":1={{ ansible_user }}"
  become: yes

- name: add vnc geometry
  lineinfile:
   path: "/etc/tigervnc/vncserver-config-defaults"
   state: present
   regexp: 'geometry='
   line: "geometry=1852x1100"
  become: yes

- name: add vnc session
  lineinfile:
   path: "/etc/tigervnc/vncserver-config-defaults"
   state: present
   regexp: 'session='
   line: "session=gnome"
  become: yes

- name: vnc pass
  shell: "echo 'vncPassw0rd' | vncpasswd -f > ~/.vnc/passwd"
  args:
    warn: no
  register: vncpass

- name: chmod read-only 
  file:
   path: '~/.vnc/passwd'
   mode: '0600'

- name: vnc pass stdout
  debug: 
    msg: "{{ vncpass.stdout_lines }}"

- name: user vnc enable
  command: "systemctl enable vncserver@:1 --now"
  args:
    warn: no
  register: uservncenable
  become: yes

- name: purge directories
  file:
    path: '{{ item }}'
    state: absent
  with_items:
  - ~/Documents
  - ~/Music
  - ~/Pictures
  - ~/Public
  - ~/Templates
  - ~/Videos

---
- name: Is IHS running?
  ignore_errors: true
  ansible.builtin.uri:
    url: "https://localhost:{{ ihs_https_port }}"
    return_content: no
    validate_certs: false
  register: isIHSup

# - name: Is IHS running output
#   ansible.builtin.debug:
#     msg: "{{ isIHSup }}"

- name: Create version dir
  delegate_to: localhost
  ansible.builtin.file:
    path: "{{ logs_dir }}/{{ env_name }}/{{ ansible_fqdn }}"
    state: directory

- name: Set http status ( started )
  when: isIHSup.status == 200
  ansible.builtin.set_fact:
    http_status: "{{ { ansible_fqdn : { 'status': 'started' } } }}"

- name: Set http status ( stopped )
  when: isIHSup.status == -1
  ansible.builtin.set_fact:
    http_status: "{{ { ansible_fqdn : { 'status': 'stopped' } } }}"

- name: Write http status to json file
  delegate_to: localhost
  ansible.builtin.copy:
    content: "{{ http_status | to_nice_json( sort_keys=false ) }}"
    dest: "{{ logs_dir }}/{{ env_name }}/{{ ansible_fqdn }}/{{ http_status_json_file }}"
    mode: '0444'

- name: HTTPServer version
  ansible.builtin.shell: "{{install_ihs_base }}/{{ http_dir }}/bin/versionInfo{{ ext }} -ifixDetail"
  register: HTTPServerVersionOutput

# - name: HTTPServerVersionOutput
#   ansible.builtin.debug:
#     msg: "{{ HTTPServerVersionOutput.stdout_lines }}"

- name: Size of stdout_lines
  delegate_to: localhost
  ansible.builtin.set_fact:
    max_counter: "{{ HTTPServerVersionOutput.stdout_lines | length }}"

- name: Create dict with http version
  ansible.builtin.set_fact:
    http_version: "{{ http_version | default({}) | combine( { item: HTTPServerVersionOutput.stdout_lines[item | int] }, recursive=True, list_merge='append' ) }}"
  with_sequence: 'start=0 end={{ max_counter | int - 1 }}'

- name: New dict http_version
  ansible.builtin.set_fact:
    versions: "{{{ ansible_fqdn : http_version }}}"

# - name: New dict append_this
#   delegate_to: localhost
#   ansible.builtin.debug:
#     msg: "{{ versions }}"

- name: Write http versionInfo to json file
  delegate_to: localhost
  ansible.builtin.copy:
    content: "{{ versions | to_nice_json( sort_keys=false ) }}"
    dest: "{{ logs_dir }}/{{ env_name }}/{{ ansible_fqdn }}/{{ http_versioninfo_json_file }}"
    mode: '0444'

- name: Plugin version
  ansible.builtin.shell: "{{ install_ihs_base }}/{{ plugin_dir }}/bin/versionInfo{{ ext }} -ifixDetail"
  register: PluginVersionOutput

# - name: PluginVersionOutput
#   ansible.builtin.debug:
#     msg: "{{ PluginVersionOutput.stdout_lines }}"

- name: Size of stdout_lines
  delegate_to: localhost
  ansible.builtin.set_fact:
    max_counter: "{{ PluginVersionOutput.stdout_lines | length }}"

- name: Create dict with plugin version(s)
  ansible.builtin.set_fact:
    plugin_version: "{{ plugin_version | default({}) | combine( { item: PluginVersionOutput.stdout_lines[item | int] }, recursive=True, list_merge='append' ) }}"
  with_sequence: 'start=0 end={{ max_counter | int - 1 }}'

- name: New dict plugin_version
  ansible.builtin.set_fact:
    versions: "{{{ ansible_fqdn : plugin_version }}}"

# - name: New dict append_this
#   delegate_to: localhost
#   ansible.builtin.debug:
#     msg: "{{ versions }}"

- name: Write plugin versionInfo to json file
  delegate_to: localhost
  ansible.builtin.copy:
    content: "{{ versions | to_nice_json( sort_keys=false ) }}"
    dest: "{{ logs_dir }}/{{ env_name }}/{{ ansible_fqdn }}/{{ plugin_versioninfo_json_file }}"
    mode: '0444'

- name: WCT version
  ansible.builtin.shell: "{{ install_ihs_base }}/{{ wct_dir }}/bin/versionInfo{{ ext }} -ifixDetail"
  register: WCTVersionOutput

# - name: WCTVersionOutput
#   ansible.builtin.debug:
#     msg: "{{ WCTVersionOutput.stdout_lines }}"

- name: Size of stdout_lines
  delegate_to: localhost
  ansible.builtin.set_fact:
    max_counter: "{{ WCTVersionOutput.stdout_lines | length }}"

- name: Create dict with wct version(s)
  ansible.builtin.set_fact:
    wct_version: "{{ wct_version | default({}) | combine( { item: WCTVersionOutput.stdout_lines[item | int] }, recursive=True, list_merge='append' ) }}"
  with_sequence: 'start=0 end={{ max_counter | int - 1 }}'

- name: New dict wct_version
  ansible.builtin.set_fact:
    versions: "{{{ ansible_fqdn : wct_version }}}"

# - name: New dict append_this
#   delegate_to: localhost
#   ansible.builtin.debug:
#     msg: "{{ versions }}"

- name: Write plugin versionInfo to json file
  delegate_to: localhost
  ansible.builtin.copy:
    content: "{{ versions | to_nice_json( sort_keys=false ) }}"
    dest: "{{ logs_dir }}/{{ env_name }}/{{ ansible_fqdn }}/{{ wct_versioninfo_json_file }}"
    mode: '0444'

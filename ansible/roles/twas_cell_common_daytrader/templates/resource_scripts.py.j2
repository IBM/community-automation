import sys
import re
# import sre
global AdminConfig

#-----------------------------------------------------------------
# WARNING: Jython/Python is extremly sensitive to indentation
# errors. Please ensure that tabs are configured appropriately
# for your editor of choice.
# 2013-04-03 schader@us.ibm.com fixed latent bug 746707
#-----------------------------------------------------------------
# wsadminlib.py is needed
#https://github.com/wsadminlib/wsadminlib/blob/master/bin/wsadminlib.py

def removeJAASAuthData (name):
	print (" ")
	print ("Removing JAAS AuthData " + name + "...")

	authList = AdminConfig.list("JAASAuthData")
	auth = ""
	if (len(authList) > 0):
		for item in authList.split("\n"):
			item = item.rstrip()
			ident = AdminConfig.showAttribute(item.rstrip(), "alias" )
			if (ident == name):
				auth = item
				break
			#endIf
		#endFor
	#endIf

	if (auth != ""):
		AdminConfig.remove(auth)
		print (name + " removed successfully!")
	else:
		print (name + " not found!")
	#endElse
#endDef

def removeJDBCProvider(name):
	print (" ")
	print ("Removing JDBCProvider " + name + "...")

	temp = AdminConfig.getid("/JDBCProvider:" + name + "/")
	if (temp):
		AdminConfig.remove(temp)
		print (name + " removed successfully!")
	else:
		print (name + " not found!")
	#endElse
#endDef

def updateDB2orDerbyDatasource (datasourceId, dbname, hostname, port, driverType):
	resourceProps = AdminConfig.list("J2EEResourceProperty", datasourceId).split("\n")
	for item in resourceProps:
		item = item.rstrip()
		propName = getNameFromId(item)
		if (propName == "serverName"):
			AdminConfig.modify(item, [["value", hostname]])
		#endIf
		if (propName == "portNumber"):
			AdminConfig.modify(item, [["value", port]])
		#endIf
		if (propName == "databaseName"):
			AdminConfig.modify(item, [["value", dbname]])
		#endIf
		if (propName == "driverType"):
			AdminConfig.modify(item, [["value", driverType]])
		#endIf
	#endFor
#endDef

def removeDatasource(name):
	print (" ")
	print ("Removing DataSource " + name + "...")

	temp = AdminConfig.getid("/DataSource:" + name + "/")
	if (temp):
		AdminConfig.remove(temp)
		print (name + " removed successfully!")
	else:
		print (name + " not found!")
	#endElse
#endDef
#-----------------------------------------------------------------
# createSIBusDT - Create a new SIBus if one does not exist. Otherwise,
#            return the existing SIBus.
#-----------------------------------------------------------------
def createSIBusDT( busName, authAlias ):
	print (" ")
	print ("Creating SIBus " + busName + "...")

	# Check if the SIBus already exists

	SIBus = AdminConfig.getid("/SIBus:"+busName+"/" )
	if (SIBus == ""):
		parms = ["-bus", busName, "-interEngineAuthAlias", authAlias]
		SIBus = AdminTask.createSIBus(parms )
                
		print (busName + " created successfully!")
	else:
		print (busName + " already exists!")
	#endElse

	return SIBus
#endDef

#-----------------------------------------------------------------
# addSIBusMemberDT - Add the specified server or cluster to the
#            SIBus if it does not already exist. Assumes that the
#            specified SIBus already exists.
#-----------------------------------------------------------------
def addSIBusMemberDT( busId, fileStore, targetArgs, dataStoreArgs ):
	#    busName          - SIBus name
	#    fileStore [0]    - create file store, otherwise create data store
 	#    fileStore [1]    - logDirectory - directory where fileStore is located (only used if fileStore[0] = true)
	#    targetArgs[0]    - cluster name or node name
	#    targetArgs[1]    - server name
	#    dataStoreArgs[0] - defaultDS - create default DS (true|false)
	#    dataStoreArgs[1] - dsJndi - jndi name of the datastore (only used if defaultDS = false)

	busName = getNameFromId(busId)
	if (len(targetArgs) == 1):
		clusterName = targetArgs[0]
		nodeName = "dummy"
		serverName = "dummy"
	else:
		nodeName = targetArgs[0]
		serverName = targetArgs[1]
		clusterName = "dummy"
	#endElse

	if (len(dataStoreArgs) == 2):
		defaultDS = dataStoreArgs[0]
		dsJndi = dataStoreArgs[1]
		defaultDS = defaultDS.lower()
	#endIf

	# Check if the bus member already exists
	parms = ["-bus", busName]
	busMembers = AdminTask.listSIBusMembers(parms).split("\n")
	member = ""
	if (busMembers[0] != ""):
		for item in busMembers:
			item = item.rstrip()
			cluster = AdminConfig.showAttribute(item, "cluster" )
			node = AdminConfig.showAttribute(item, "node" )
			server = AdminConfig.showAttribute(item, "server" )

			if (cluster == clusterName  or ( server == serverName  and node == nodeName ) ):
				member = item
				break
			#endIf
		#endFor
	#endIf
	
	if (member == ""):
		print ("")
		if (len(targetArgs) == 1):
			print ("Adding SIBus member " + clusterName + "...")
			parms = ["-bus", busName, "-cluster", clusterName]
		else:
			print ("Adding SIBus member " + nodeName + " - " + serverName + "...")
			parms = ["-bus", busName, "-node", nodeName, "-server", serverName]
		#endElse

		print ("  File Store:            " + fileStore[0])
		if (fileStore[0] == "true"):
			parms += ["-fileStore","-logSize", "100","-logDirectory","${USER_INSTALL_ROOT}/filestores/logs0"]
			parms += ["-minPermanentStoreSize","200","-maxPermanentStoreSize","500","-unlimitedPermanentStoreSize","false","-permanentStoreDirectory","${USER_INSTALL_ROOT}/filestores/logPerm0"]
			parms += ["-minTemporaryStoreSize","200","-maxTemporaryStoreSize","500","-unlimitedTemporaryStoreSize","false","-temporaryStoreDirectory","${USER_INSTALL_ROOT}/filestores/logPerm0"]
		else:
			parms.append("-dataStore")
			print ("  Default DataSource:    " + defaultDS)
			parms.append("-createDefaultDatasource")
			parms.append(defaultDS)
			if (defaultDS == "false"):
				print ("  Datasource JNDI Name:  " + dsJndi)
				parms.append("-datasourceJndiName")
				parms.append(dsJndi)
			#endIf
		#endElse

		member = AdminTask.addSIBusMember(parms )
		print ("SIBus member added successfully!")
	else:
		print ("SIBus member already exists!")
	#endElse

	return member
#endDef

#-----------------------------------------------------------------
# enableSIBService - Enable the SIB Service on the specified
#            server.
#-----------------------------------------------------------------
def enableSIBService (serverId):
	serverName = getNameFromId(serverId)

	service = ""
	serviceList = AdminConfig.list("SIBService")
	for item in serviceList.split("\n"):
		item = item.rstrip()
		if (item.find("servers/" + serverName + "|") >= 0):
			service = item
		#endIf
	#endFor

	print (" ")
	print ("Enabling SIB Service on " + serverName + "...")

	if (service == ""):                 
		print ("Unable to find SIB Service!")
	else:
		parms = [["enable", "true"]]
		AdminConfig.modify(service, parms )
		print ("SIB Service enabled successfully!")
	#endElse
#endDef

#-----------------------------------------------------------------
# createSIBusRole - Add user role
#-----------------------------------------------------------------
def createSIBusSecurityRole ( busId, userName ):
	print (" ")
	busName = getNameFromId(busId)

	# Check if the SIBAuthUser already exists
	SIBAuthUser = ""
	tmpSIBAuthUserList = AdminConfig.list("SIBAuthUser", busId)
	if (len(tmpSIBAuthUserList) > 0):
		for item in tmpSIBAuthUserList.split("\n"):
			item = item.rstrip()
			tmp = AdminConfig.showAttribute(item, "identifier" )
			if (tmp == userName):
				SIBAuthUser = item
			#endIf
		#endFor
	#endIf

	if (SIBAuthUser == ""):
		print ("Creating SIBus security role for " + userName + "...")
                
		parms = ["-bus", busName, "-user", userName]
		SIBAuthUser = AdminTask.addUserToBusConnectorRole(parms )
               
		print (userName + " security role created successfully!")
	else:
		print ("Role " + userName + " already exists for " + busName + "!")
	#endElse

	return SIBAuthUser
#endDef

#-----------------------------------------------------------------
# createMessageEngine - Create a new message engine on the specified
#            target.
#-----------------------------------------------------------------
def createMessageEngine ( busId, defaultDS, dsJndi, optArgs ):
	#    busName     - SIBus name
	#    defaultDS   - create default DS (true|false)
	#    dsJndi      - jndi name of the datasource (only used if defaultDS = false)
	#    optArgs[0]  - node name or cluster name
	#    optArgs[1]  - server name

	defaultDS = defaultDS.lower()
	if (len(optArgs) == 1):
		clusterName = optArgs[0]
	else:
		nodeName = optArgs[0]
		serverName = optArgs[1]
	#endElse

	busName = getNameFromId(busId)

	print (" ")
	print ("Creating SIB Messaging Engine...")
	print ("  Bus Name:            " + busName)
	print ("  Default DataSource:  " + defaultDS)
	if (defaultDS == "False"):
		print ("  Datasource JNDI Name:  " + dsJndi)
	#endIf
	if (len(optArgs) == 1):
		print ("  Cluster Name:        " + clusterName)
	else:
		print ("  Node Name:           " + nodeName)
		print ("  Server Name:         " + serverName)
	#endElse

	if (len(optArgs) == 1):
		parms = ["-bus", busName, "-cluster", clusterName, "-createDefaultDatasource", defaultDS]
	else:
		parms = ["-bus", busName, "-node", nodeName, "-server", serverName, "-createDefaultDatasource", defaultDS]
	#endElse

	if (defaultDS == "false"):
		parms.append("-datasourceJndiName")
		parms.append(dsJndi)
	#endIf

	me = AdminTask.createSIBEngine(parms )
	print (getNameFromId(me) + "Message Engine created successfully!")
	
	return me
#endDef

#-----------------------------------------------------------------
# modifyMEDataStore - Modify the data store attributes for the
#            target messageing engine.
#-----------------------------------------------------------------
def modifyMEDataStore ( meId, authAlias, schema ):
	#    meId        - id of the target message engine
	#    authAlias   - authentication alias name
	#    datasource  - datasource JNDI name
	#    schema      - schema name

	print (" ")
	print ("Modifying ME DataStore parameters...")

	dataStore = AdminConfig.showAttribute(meId, "dataStore" )

	if (dataStore != ""):
		print ("  ME Name:          " + getNameFromId(meId))
		print ("  AuthAlias:        " + authAlias)
		print ("  Schema Name:      " + schema)

		attrs = [["authAlias", authAlias], ["schemaName", schema]]
		AdminConfig.modify(dataStore, attrs )

		print (getNameFromId(meId) + " data store modified successfully!")
	else:
		print ("Data store could not be located for " + getNameFromId(meId) + "!")
	#endElse
#endDef

#-----------------------------------------------------------------
# createSIBDestination - Create a new SIB Destination if one with the same
#            name does not exist on the specified SIBus. Otherwise,
#            return the existing Destination.
#-----------------------------------------------------------------
def createSIBDestination ( busId, destName, destType, reliability, optArgs ):
	#    SIBus       - SIBus name
	#    destName    - destination name
	#    destType    - destination type
	#    reliability - reliability
	#    optArgs[0]  - cluster name or node name
	#    optArgs[1]  - server name

	if (len(optArgs) == 1):
		clusterName = optArgs[0]
	elif (len(optArgs) == 2) :
		nodeName = optArgs[0]
		serverName = optArgs[1]
	#endElse

	print (" ")
	print ("Creating SIB Destination " + destName + "...")

	# Check if the SIB Destination already exists
	SIBus = getNameFromId(busId)
	parms = ["-bus", SIBus]
	destList = AdminTask.listSIBDestinations(parms )

	dest = ""
	if (len(destList) > 0):
		for item in destList.split("\n"):
			item = item.rstrip()
			ident = AdminConfig.showAttribute(item.rstrip(), "identifier" )
			if (ident == destName):
				dest = item.rstrip()
				break
			#endIf
		#endFor
	#endIf

	if (dest == ""):        
		print ("  Destination Name:  " + destName)
		print ("  Destination Type:  " + destType)
		print ("  Reliability:       " + reliability)
                
		parms = ["-bus", SIBus, "-name", destName, "-type", destType, "-reliability", reliability]

		if (destType == "Queue"):
			if (len(optArgs) == 1):
				print ("  Cluster Name:      " + clusterName)
				parms.append("-cluster")
				parms.append(clusterName)
			elif (len(optArgs) == 2):
				print ("  Node Name:         " + nodeName)
				print ("  Server Name:       " + serverName)
				parms.append("-node")
				parms.append(nodeName)
				parms.append("-server")
				parms.append(serverName)
			#endElse
		#endIf

		dest = AdminTask.createSIBDestination(parms )
                
		print (destName + " created successfully!")
	else:
		print (destName + " already exists!")
	#endElse

	return dest
#endDef

def deleteSIBDestination(name):
	print (" ")
	print ("Deleting SIB Destination " + name + "...")

	destList = AdminConfig.list("SIBDestination")
	dest = ""
	if (len(destList) > 0):
		for item in destList.split("\n"):
			item = item.rstrip()
			ident = AdminConfig.showAttribute(item.rstrip(), "identifier" )
			if (ident == name):
				dest = item
				break
			#endIf
		#endFor
	#endIf

	if (dest != ""):
		bus = dest[dest.rfind("/")+1 : dest.rfind("|")]
		parms = ["-bus", bus, "-name", name]
		AdminTask.deleteSIBDestination(parms)
		print (name + " removed successfully!")
	else:
		print (name + " not found!")
	#endElse
#endDef

#-----------------------------------------------------------------
# createOneOfNPolicy - Install the SIB JMS Resource Adapter
#            at the cell scope.
#-----------------------------------------------------------------
def createOneOfNPolicy ( name, alivePeriod, serverName, meName ):
	#    name        - name of HA policy
	#    alivePeriod - number of seconds the server is alive
	#    serverName  - name of pinned server
	#    meName      - name of corresponding messaging engine

	groupName = AdminTask.getDefaultCoreGroupName( )
	group = AdminConfig.getid("/CoreGroup:"+groupName+"/" )

	groupServer = AdminConfig.getid("/CoreGroupServer:"+serverName+"/" )

	print (" ")
	print ("Creating OneOfNPolicy " + name + "...")

	# Check if the policy already exists
	policy = AdminConfig.getid("/OneOfNPolicy:\""+name+"\"/" )

	if (policy == ""):
		print ("  Alive Period(s):  " + str(alivePeriod))
		print ("  Server Name:      " + serverName)
		print ("  ME Name:          " + meName)

		attrs = [["name", name], ["failback", "true"], ["isAlivePeriodSec", alivePeriod], ["policyFactory", "com.ibm.ws.hamanager.coordinator.policy.impl.OneOfNPolicyFactory"]]
                
		policy = AdminConfig.create("OneOfNPolicy", group, attrs, "policies" )
                
		attrs = [["preferredOnly", "true"], ["preferredServers", groupServer]]
		AdminConfig.modify(policy, attrs )

		attrs = [["name", "WSAF_SIB_MESSAGING_ENGINE"], ["value", meName]]
		AdminConfig.create("MatchCriteria", policy, attrs, "MatchCriteria" )

		attrs = [["name", "type"], ["value", "WSAF_SIB"]]
		AdminConfig.create("MatchCriteria", policy, attrs, "MatchCriteria" )

		print (name + " created successfully!")
	else:
		print (name + " already exists!")
	#endElse

	return policy
#endDef

def deleteOneOfNPolicy (name):
	print (" ")
	print ("Deleting OneOfNPolicy " + name + "...")

	policyList = AdminConfig.list("OneOfNPolicy")
	policy = ""
	if (len(policyList) > 0):
		for item in policyList.split("\n"):
			item = item.rstrip()
			if (name == getNameFromId(item)):
				policy = item
				break
			#endIf
		#endFor
	#endIf

	if (policy != ""):
		AdminConfig.remove(policy)
		print (name + " removed successfully!")
	else:
		print (name + " not found!")
	#endElse
#endDef

#-----------------------------------------------------------------
# createJMSConnectionFactory - Create a new JMS Connection Factory
#            if one with the same name does not exist on the SIBus.
#            Otherwise, return the existing Connection Factory.
#-----------------------------------------------------------------
def createJMSConnectionFactory ( busId, cfName, cfType, jndiName, authAlias, scope ):
	# Create JMS Connection Factory
	#    SIBus      - SIBus name
	#    cfName     - connection factory name
	#    cfType     - connection factory type
	#    jndiName   - connection factory jndi name
	#    authAlias  - authentication alias name
	#    scope      - scope

	print (" ")
	print ("Creating JMS " + cfType + " Connection Factory " + cfName + "...")

	# Check if the connection factory already exists

	parms = ["-type", cfType]
	cfList = AdminTask.listSIBJMSConnectionFactories(scope, parms )
	connectionFactory = ""
	if (len(cfList) > 0):
		for item in cfList.split("\n"):
			item = item.rstrip()
			if (item.find(cfName) >= 0):
				connectionFactory = item
				break
			#endIf
		#endFor
	#enfIf

	if (connectionFactory == "" ):
		print ("  Connection Factory Name:  " + cfName)
		print ("  Connection Factory Type:  " + cfType)
		print ("  JNDI Name:                " + jndiName)

		params = ["-name", cfName, "-jndiName", jndiName, "-busName", getNameFromId(busId), "-type", cfType, "-authDataAlias", authAlias]
		connectionFactory = AdminTask.createSIBJMSConnectionFactory(scope, params )
                
		print (cfName + " created successfully!")
	else:
		print (cfName + " already exists!")
	#endElse

	return connectionFactory
#endDef

def deleteJMSConnectionFactory(name):
	print (" ")
	print ("Deleting JMS Connection Factory " + name + "...")

	temp = AdminConfig.getid("/J2CConnectionFactory:" + name + "/")
	if (temp):
		AdminTask.deleteSIBJMSConnectionFactory(temp)
		print (name + " removed successfully!")
	else:
		print (name + " not found!")
	#endElse
#endDef

#-----------------------------------------------------------------
# createJMSQueue - Create a new JMS Queue if one with the same
#            name does not exist at the specified scope. Otherwise,
#            return the existing JMS Queue.
#-----------------------------------------------------------------
def createJMSQueue ( qName, jndiName, SIBDest, delMode, scope ):
	#    qName    - queue name
	#    jndiName - queue jndi name
	#    SIBDest  - SIB destination
	#    delMode  - delivery mode
	#    scope    - scope

	print (" ")
	print ("Creating JMS Queue " + qName + "...")

	# Check if the queue already exists

	qList = AdminTask.listSIBJMSQueues(scope )
	queue = ""
	if (len(qList) > 0):
		for item in qList.split("\n"):
			item = item.rstrip()
			if (item.find(qName) >= 0):
				queue = item
				break
			#endIf
		#endFor
	#endIf

	if (queue == ""):
		print ("  Queue Name:       " + qName)
		print ("  JNDI Name:        " + jndiName)
		print ("  SIB Destination:  " + SIBDest)
		print ("  Delivery Mode:    " + delMode)

		params = ["-name", qName, "-jndiName", jndiName, "-queueName", SIBDest, "-deliveryMode", delMode]
		queue = AdminTask.createSIBJMSQueue(scope, params )
                
		print (qName + " created successfully!")
	else:
		print (qName + " already exists!")
	#endElse

	return queue
#endDef

def deleteJMSQueue(queueName):
	print (" ")
	print ("Deleting JMS Queue " + queueName + "...")

	temp = AdminConfig.getid("/J2CAdminObject:" + queueName + "/")
	if (temp):
		AdminTask.deleteSIBJMSQueue(temp)
		print (queueName + " removed successfully!")
	else:
		print (queueName + " not found!")
	#endElse
#endDef

#-----------------------------------------------------------------
# createJMSTopic - Create a new JMS Topic if one with the same
#            name does not exist at the specified scope. Otherwise,
#            return the existing JMS Topic.
#-----------------------------------------------------------------
def createJMSTopic ( tName, jndiName, tSpace, delMode, scope ):
	#    tName    - topic name
	#    jndiName - topic jndi name
	#    tSpace   - topic space
	#    delMode  - delivery mode
	#    scope    - scope

	print (" ")
	print ("Creating JMS Topic " + tName + "...")

	# Check if the topic already exists

	tList = AdminTask.listSIBJMSTopics(scope )
	topic = ""
	if (len(tList) > 0):
		for item in tList.split("\n"):
			item = item.rstrip()
			if (item.find(tName) >= 0):
				topic = item
				break
			#endIf
		#endFor
	#endIf

	if (topic == ""):
		print ("  Topic Name:     " + tName)
		print ("  JNDI Name:      " + jndiName)
		print ("  Topic Space:    " + tSpace)
		print ("  Delivery Mode:  " + delMode)

		params = ["-name", tName, "-jndiName", jndiName, "-topicName", tName, "-topicSpace", tSpace, "-deliveryMode", delMode]
		topic = AdminTask.createSIBJMSTopic(scope, params )
                
		print (tName + " created successfully!")
	else:
		print (tName + " already exists!")
	#endElse

	return topic
#endDef

def deleteJMSTopic(topicName):
	print (" ")
	print ("Deleting JMS Topic " + topicName + "...")

	temp = AdminConfig.getid("/J2CAdminObject:" + topicName + "/")
	if (temp):
		AdminTask.deleteSIBJMSTopic(temp)
		print (topicName + " removed successfully!")
	else:
		print (topicName + " not found!")
	#endElse
#endDef

#-----------------------------------------------------------------
# createMDBActivationSpec - Create a new MDB Activation Spec if one
#            with the same name does not exist at the specified
#            scope. Otherwise, return the existing Activation Spec.
#-----------------------------------------------------------------
def createMDBActivationSpec ( mdbName, jndiName, busId, JMSDestJndi, destType, authAlias, scope, durability ):
	#    mdbName     - MDB name
	#    jndiName    - activation spec jndi name
	#    SIBus       - SIBus name
	#    JMSDestJndi - JMS destination JNDI name
	#    destType    - destination type
	#    authAlias   - authentication alias name
	#    scope       - scope
	#    durability  - subscriptionDurability

	print (" ")
	print ("Creating MDB Activation Spec " + mdbName + "...")

	# Check if the activation spec already exists

	asList = AdminTask.listSIBJMSActivationSpecs(scope )
	mdb = ""
	if (len(asList) > 0):
		for item in asList.split("\n"):
			item = item.rstrip()
			if (item.find(mdbName) >= 0):
				mdb = item
				break
			#endIf
		#endFor
	#endIf

	if (mdb == ""):
		print ("  MDB Activation Spec Name:   " + mdbName)
		print ("  JNDI Name:                  " + jndiName)
		print ("  JMS Destination JNDI Name:  " + JMSDestJndi)
		print ("  Destination Type:           " + destType)

		SIBus = getNameFromId(busId)
		params = ["-name", mdbName, "-jndiName", jndiName, "-busName", SIBus, "-destinationJndiName", JMSDestJndi, "-destinationType", destType, "-authenticationAlias", authAlias, "-subscriptionDurability", durability, "-clientId", mdbName, "-subscriptionName", mdbName]
		mdb = AdminTask.createSIBJMSActivationSpec(scope, params )
                
		print (mdbName + " created successfully!")
	else:
		print (mdbName + " already exists!")
	#endElse

	return mdb
#endDef

def deleteMDBActicationSpec (mdbName):
	print (" ")
	print ("Deleting MDB Activation Spec " + mdbName + "...")

	temp = AdminConfig.getid("/J2CActivationSpec:" + mdbName + "/")
	if (temp):
		AdminTask.deleteSIBJMSActivationSpec(temp)
		print (mdbName + " removed successfully!")
	else:
		print (mdbName + " not found!")
	#endElse
#endDef

#-----------------------------------------------------------------
# addHostAliasToDefaultHost - Add the specified port to the default
#            host mappings.
#-----------------------------------------------------------------
def addHostAliasToDefaultHost ( port ):
	#    port - port number

	print (" ")
	print ("Creating HostAlias for " + port + "...")

	# Check if the port already exists

	hostList = AdminConfig.list("HostAlias" )
	hostAlias = ""
	if (len(hostList) > 0):
		for item in hostList.split("\n"):
			item = item.rstrip()
			tmp = AdminConfig.showAttribute(item, "port" )
			if (tmp == port):
				hostAlias = item
				break
			#endIf
		#endFor
	#endIf

	if (hostAlias == ""):
		print ("  Host Name:  *")
		print ("  Port:       " + port)

		vhList = AdminConfig.list("VirtualHost" )
		defaultHost = ""
		for item in vhList.split("\n"):
			item = item.rstrip()
			if (getNameFromId(item) == "default_host"): 
				defaultHost = item
			#endIf
		#endFor

		attrs = [["hostname", "*" ], ["port", port]]
		hostAlias = AdminConfig.create("HostAlias", defaultHost, attrs )

		print (port + " created successfully!")
	else:
		print (port + " already exists!")
	#endElse

	return hostAlias
#endDef

#-----------------------------------------------------------------
# installApp - Install the specified application ear file if an
#            application with the same name does not exist.
#-----------------------------------------------------------------
def installApp ( appName, ear, deployejb, deployws, defaultBindings, earMetaData, dbType, target ):
	#    appName         - application name
	#    ear             - ear file
	#    deployejb       - deploy ejb (true|false)
	#    deployws        - deploy webservices (true|false)
	#    defaultBindings - use default binding (true|false)
	#    earMetaData     - use MetaData from ear (true|false)
	#    dbType          - ejb deploy db type
	#    target[0]       - node name or cluster name
	#    target[1]       - server name

	print ("")
	print ("Installing application " + appName + "...")
	
	deployejb = deployejb.lower()
	deployws = deployws.lower()
	defaultBindings = defaultBindings.lower()
	earMetaData = earMetaData.lower()

	# Check if the application already exists
	app = ""
	appList = AdminApp.list( )
	if (len(appList) > 0):
		for item in appList.split("\n"):
			item = item.rstrip()
			if (item.find(appName) == 0):
				app = item
				break
			#endIf
		#endFor
	#endIf

	if (app == ""):
		print ("  Application Name:      " + appName)
		print ("  Ear file:              " + ear)
		if (len(target) == 1):
			cluster = target[0]
			print ("  Target Cluster:        " + cluster)
		else:
			node = target[0]
			server = target[1]
			print ("  Target Node:           " + node)
			print ("  Target Server:         " + server)
		#endElse
		print ("  Deploy EJB:            " + deployejb)
		print ("  Deploy WebServices:    " + deployws)
		print ("  Use default bindings:  " + defaultBindings)
		print ("  Use Ear MetaData:      " + earMetaData)
		print ("  Deployed DB Type:      " + dbType)

		parms = "-appname " + appName
		if (deployejb == "true"):
			parms += " -deployejb"
			parms += " -deployejb.dbtype " + dbType
		else:
			parms += " -nodeployejb"
		#endElse
		if (deployws == "true"):
			parms += " -deployws"
		else:
			parms += " -nodeployws"
		#endElse
		if (defaultBindings == "true"):
			parms += " -usedefaultbindings"
		#endIf
		if (earMetaData == "true"):
			parms += " -useMetaDataFromBinary"
		else:
			parms += " -nouseMetaDataFromBinary"
		#endElse

		if (len(target) == 1):
			parms += " -cluster " + cluster
		else:
			parms += " -node " + node + " -server " + server
		#endElse

		parms1 = [parms]

		print ("Starting application install...")

		app = AdminApp.install(ear, parms1 )

		print ("Install completed successfully!")
	else:
		print (appName + " already exists!")
	#endElse

	return app
#endDef

#-----------------------------------------------------------------
# uninstallApp - Uninstall the specified application if it exists.
#-----------------------------------------------------------------
def uninstallApp ( appName ):
	#    appName - application name

	print ("")
	print ("Uninstalling application...")

	# Check if the application does not exist
	app = ""
	appList = AdminApp.list( )
	if (len(appList) > 0):
		for item in appList.split("\n"):
			item = item.rstrip()
			if (item.find(appName) >= 0):
				app = item
				break
			#endIf
		#endFor
	#endIf

	if (app != ""):
		AdminApp.uninstall(appName )

		print ("Application uninstalled successfully!")
	else:
		print ("Application does not exist!")
	#endElse
#endDef
---
- name: Configure
  tags: configure 
  block:
  - name: check if liberty is installed
    ansible.builtin.stat:
      path: "{{ install_base }}/{{ liberty_dir }}/bin/server"
    register: isliberty
    failed_when: isliberty.stat.exists == False

  - name: does controller exist?
    ansible.builtin.stat:
      path: "{{ wlp_usr_dir }}/servers/{{ cc_server }}"
    register: iscc

  - name:  stop existing controller process
    ignore_errors: true
    ansible.builtin.shell: "{{ wlp_cmd }} {{install_base }}/{{ liberty_dir }}/bin/server stop {{ cc_server }}"
    when: iscc.stat.exists == True
    register: op

  - ansible.builtin.debug:
      msg: '{{ op }}'

  - name: Remove current controller server
    ansible.builtin.file:
      path: "{{ item }}"
      state: absent
    with_items:
    - "{{ wlp_usr_dir }}/servers/{{ cc_server }}"

  - name: OS400 Remove current controller server output
    ansible.builtin.file:
      path: "{{ item }}"
      state: absent
    with_items:
    - "{{ wlp_output }}/{{ cc_server }}"
    when: ansible_system == 'OS400'

  - name:  create server
    ansible.builtin.shell: "{{ wlp_cmd }} {{install_base }}/{{ liberty_dir }}/bin/server create {{ cc_server }}"
    register: op

  - ansible.builtin.debug:
      msg: '{{ op.stdout_lines }}'

  - name:  create controller 
    ansible.builtin.shell: "{{install_base }}/{{ liberty_dir }}/bin/collective create {{ cc_server }} --hostName={{ cc_primary_server }} --keystorePassword={{ liberty_admin_pass }} --createConfigFile=controller.xml"
    args:
      chdir: "{{ wlp_usr_dir }}/servers/{{ cc_server }}"
    register: op

  - ansible.builtin.debug:
      msg: '{{ op.stdout_lines }}'

  - name: update admin user
    ansible.builtin.replace:
      path: "{{ wlp_usr_dir }}/servers/{{ cc_server }}/controller.xml"
      regexp: 'userName=""'
      replace: 'userName="{{ liberty_admin_user }}"'
  - name: update admin password
    ansible.builtin.replace:
      path: "{{ wlp_usr_dir }}/servers/{{ cc_server }}/controller.xml"
      regexp: 'userPassword=""'
      replace: 'userPassword="{{ liberty_admin_pass }}"'

  - name: update to tlsv1.2
    ansible.builtin.lineinfile:
      path: "{{ wlp_usr_dir }}/servers/{{ cc_server }}/controller.xml"
      regexp: 'sslProtocol="TLSv1.2"'
      insertafter: '<ssl id="defaultSSLConfig"'
      line: '     sslProtocol="TLSv1.2,TLSv1.3"'

  - name: Optionally disable / enable HNV
    when: 
      - enable_hnv is defined
    ansible.builtin.lineinfile:
      path: "{{ wlp_usr_dir }}/servers/{{ cc_server }}/controller.xml"
      regexp: 'verifyHostname'
      insertafter: '<ssl id="defaultSSLConfig"'
      line: '     verifyHostname="{{ enable_hnv }}"'

  - name: autoAcceptCertificates
    ansible.builtin.lineinfile:
      path: "{{ wlp_usr_dir }}/servers/{{ cc_server }}/server.env"
      regexp: 'autoAcceptCertificates'
      line: 'JVM_ARGS=-Dcom.ibm.websphere.collective.utility.autoAcceptCertificates=true'

  - name: update http port
    ansible.builtin.replace:
      path: "{{ wlp_usr_dir }}/servers/{{ cc_server }}/server.xml"
      regexp: '9080'
      replace: "{{ liberty_admin_port }}"

  - name: update https port
    ansible.builtin.replace:
      path: "{{ wlp_usr_dir }}/servers/{{ cc_server }}/server.xml"
      regexp: '9443'
      replace: "{{ liberty_admin_ports }}"

  - name: Disable the enableWelcomePage
    ansible.builtin.lineinfile:
      path: "{{ wlp_usr_dir }}/servers/{{ cc_server }}/controller.xml"
      regexp: 'httpDispatcher'
      insertbefore: '</server>'
      line: '     <httpDispatcher enableWelcomePage="false" />'

  - name: include controller.xml in server.xml
    ansible.builtin.lineinfile:
      path: "{{ wlp_usr_dir }}/servers/{{ cc_server }}/server.xml"
      regexp: '^controller.xml'
      insertbefore: '</server>'
      line: '    <include location="${server.config.dir}/controller.xml" />'

  - name: configure remoteFileAccess for controller
    ansible.builtin.lineinfile:
      path: "{{ wlp_usr_dir }}/servers/{{ cc_server }}/server.xml"
      regexp: '^remoteFileAccess'
      insertbefore: '</server>'
      line: '    <remoteFileAccess><writeDir>${server.config.dir}</writeDir></remoteFileAccess>'

  - name: listen externally
    ansible.builtin.lineinfile:
      path: "{{ wlp_usr_dir }}/servers/{{ cc_server }}/server.xml"
      regexp: '^host="*"'
      insertbefore: 'httpPort='
      line: '                  host="*"'

  # There's version confilict with jsp and mpHealth
  - name: Remove jsp2.3 from feautres
    ansible.builtin.lineinfile:
      line: '        <feature>jsp-2.3</feature>'
      path: "{{ wlp_usr_dir }}/servers/{{ cc_server }}/server.xml"
      state: absent
      
  - name: add controller features
    ansible.builtin.lineinfile:
      path: "{{ wlp_usr_dir }}/servers/{{ cc_server }}/server.xml"
      regexp: '^controller.xml'
      insertbefore: '</featureManager>'
      line: "{{ item }}"
    with_items: 
    - '        <feature>pages-3.1</feature>'
    - '        <feature>restConnector-2.0</feature>'
    - '        <feature>localConnector-1.0</feature>'
    - '        <feature>adminCenter-1.0</feature>'
    - '        <feature>ssl-1.0</feature>'
    - '        <feature>dynamicRouting-1.0</feature>'
    - '        <feature>scalingController-1.0</feature>'
    - '        <feature>mpMetrics-5.1</feature>'
    - '        <feature>mpHealth-4.0</feature>'

  - name: copy jvm.options template
    ansible.builtin.template:
     src: jvm.options.j2
     dest: "{{ wlp_usr_dir }}/servers/{{ cc_server }}/jvm.options"

  - name:  set IBM i perms
    ansible.builtin.include_role:
      name: liberty_ibmi_grantauth

    # must use nohup else the server stops after the controller process exits
  - name: Start Liberty Controller Server
    failed_when: false
    ansible.builtin.command:
      cmd: "{{ wlp_nohup }} {{ wlp_cmd }} {{install_base }}/{{ liberty_dir }}/bin/server start {{ cc_server }} --clean"
    register: op

  - ansible.builtin.debug:
     msg: '{{ op.stdout_lines }}'

  - name: check server status
    failed_when: false
    ansible.builtin.command:
      cmd: "{{ wlp_cmd }} {{install_base }}/{{ liberty_dir }}/bin/server status {{ cc_server }}"
    register: op

  - ansible.builtin.debug:
     msg: '{{ op.stdout_lines }}'
  when: controller_role == 'primary'
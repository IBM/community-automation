---
- name: Print DB info
  when: groups.db is defined
  block:
    # if the db container is not running this will not work
    # our container already exports this to a file on the mounted volume
    # dbdir/backup/db2ls.info
    #
    # - name: Get the DB container version info
    #   containers.podman.podman_container_exec:
    #     name: "{{ svt_db_container_name }}"
    #     command: "su - db2inst1 -c db2ls -c"
    #   register: dbinfo

    # the db2ls.info file is new, and prob not on all the target dbs yet
    - name: Check if dbdir/backup/db2ls.info exists
      stat:
        path: dbdir/backup/db2ls.info
      register: isdb2ls

    - name: Block for db2ls.info
      when: (isdb2ls.stat.exists and isdb2ls.stat.size != 0)
      block:
        - name: Fetch the dbdir/backup/db2ls.info
          fetch:
            src: ~/dbdir/backup/db2ls.info
            dest: "{{ logs_dir }}/{{ env_name }}/db2ls.info"
            flat: yes
        # #PATH:VRMF:FIXPACK:SPECIAL:INSTALLTIME:INSTALLERUID 
        # /opt/ibm/db2/V12.1:12.1.1.0:0 ::Tue Feb  4 22:54:29 2025 UTC :0 

        # replace this clunky with some cool regex
        - name: Print out value in a file
          ansible.builtin.slurp: 
            src: ~/dbdir/backup/db2ls.info
          register: output
        - name: print out the value
          ansible.builtin.debug:
            msg: "{{ output }}"
        - name: Do some regex
          ansible.builtin.set_fact:
            content: "{{ output.content | b64decode | regex_search('(?:\\d{1,3}\\.){3}\\d{1,3}\\:\\d+') | split(':') }}"
        - name: Set the DB version / fixpack facts
          ansible.builtin.set_fact:
            db_Version: "{{ content[0] }}" # ?? some tricky regex
            db_Fixpack: "{{ content[1] }}" # ?? some tricky regex

    - name: Default the db version db2ls file not found
      delegate_to: localhost
      when: (not isdb2ls.stat.exists or isdb2ls.stat.size == 0)
      ansible.builtin.set_fact:
        db_Version: "V12.1.1.0"
        db_Fixpack: "0"

    - name: Create local logs dir
      delegate_to: localhost
      ansible.builtin.file:
        path: "{{ logs_dir }}/{{ env_name }}"
        state: directory
        mode: '0755'

    # Support multiple stress enginges, check for file.  If it exists, read it and combine
    - name: Check if db_info exists
      delegate_to: localhost
      stat:
        path: "{{ logs_dir }}/{{ env_name }}/{{ db_info_json_file }}.json"
      register: isinfo

    - name: Read in previous stress_status to combine
      when: isinfo.stat.exists
      block:
        - name: Read the contents previous db_info
          delegate_to: localhost
          ansible.builtin.set_fact:
            prev_info: "{{ lookup('ansible.builtin.file', '{{ logs_dir }}/{{ env_name }}/{{ db_info_json_file }}.json') | from_json }}"
            
        - name: Read the contents previous db_info
          delegate_to: localhost
          ansible.builtin.set_fact:
            prev_info: "{{ lookup('ansible.builtin.file', '{{ logs_dir }}/{{ env_name }}/{{ db_info_json_file }}.json') | from_json }}"

        - name: Save dbinfo to temp json
          delegate_to: localhost
          ansible.builtin.template:
            src: db_info.json.j2
            dest: "{{ logs_dir }}/{{ env_name }}/{ db_info_json_file }}.temp.json"
            mode: '0444'

        - name: Read the current dbinfo temp son
          delegate_to: localhost
          ansible.builtin.set_fact:
            current_info: "{{ lookup('ansible.builtin.file', '{{ logs_dir }}/{{ env_name }}/{{ db_info_json_file }}.temp.json') | from_json }}"

        - name: Save db_info ( combined )
          delegate_to: localhost
          ansible.builtin.copy:
            content: "{{ current_info | ansible.builtin.combine(prev_info) }}"
            dest: "{{ logs_dir }}/{{ env_name }}/{{ db_info_json_file }}.json"
            mode: '0444'

        - name: Remove temp status json
          delegate_to: localhost
          ansible.builtin.file:
            path: "{{ logs_dir }}/{{ env_name }}/{{ db_info_json_file }}.temp.json"
            state: absent

    - name: Save dbinfo to db_info.json
      when: not isinfo.stat.exists
      delegate_to: localhost
      ansible.builtin.template:
        src: db_info.json.j2
        dest: "{{ logs_dir }}/{{ env_name }}/{{ db_info_json_file }}.json"
        mode: '0444'

---
- name: join collective
  tags: join_collective 
  block:
  - name: check if liberty is installed
    stat:
      path: "{{ install_base }}/{{ liberty_dir }}/bin/server"
    register: isliberty
    failed_when: isliberty.stat.exists == False

  - name:  stop existing server process
    ignore_errors: true
    shell: "{{install_base }}/{{ liberty_dir }}/bin/server stop {{ wl_server }}"
    when: iscc.stat.exists == True

    #does not work due to cc out of scope
    #    - name: set controller hostname
    #    set_fact:
    #      cc_hostname: "{{ ansible_hostname }}"
    #    when: "'cc' in group_names"

  - name:  join collective
    shell: "{{install_base }}/{{ liberty_dir }}/bin/collective join {{ wl_server }} --host={{ cc_hostname }} --port={{ admin_port }} --user={{ admin_user }} --password={{ admin_pass }} --keystorePassword={{ admin_pass }} --autoAcceptCertificates --createConfigFile=collectiveMember.xml"
    args:
      chdir: "{{install_base }}/{{ liberty_dir }}/usr/servers/{{ wl_server }}"
    register: joinOutput

  - debug:
     msg: "{{ joinOutput.stdout_lines }}"

  - name: update to tlsv1.2
    lineinfile:
      path: "{{ install_base }}/{{ liberty_dir }}/usr/servers/{{ wl_server }}/collectiveMember.xml"
      regexp: '^sslProtocol="TLSv1.2"'
      insertafter: '<ssl id="defaultSSLConfig"'
      line: '     sslProtocol="TLSv1.2"'

  - name: autoAcceptCertificates
    lineinfile:
      path: "{{ install_base }}/{{ liberty_dir }}/usr/servers/{{ wl_server }}/server.env"
      regexp: 'autoAcceptCertificates'
      line: 'JVM_ARGS=-Dcom.ibm.websphere.collective.utility.autoAcceptCertificates=true'

  - name: include collectiveMember.xml in server.xml
    lineinfile:
      path: "{{ install_base }}/{{ liberty_dir }}/usr/servers/{{ wl_server }}/server.xml"
      regexp: '^controller.xml'
      insertbefore: '</server>'
      line: '    <include location="${server.config.dir}/collectiveMember.xml" />'

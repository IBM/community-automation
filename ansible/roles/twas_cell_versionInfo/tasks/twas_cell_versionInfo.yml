---
- name: check if tWAS installed
  ansible.builtin.stat:
    path: "{{ install_base }}/{{ twas_dir }}/bin/versionInfo{{ ext }}"
  register: istwas

- name: tWAS versions
  when: istwas.stat.exists
  block:

  - name: Create version dir
    delegate_to: localhost
    ansible.builtin.file:
      path: "{{ logs_dir }}/{{ env_name }}/{{ ansible_fqdn }}"
      state: directory
      mode: '0755'

  - name: Fetch properties/version/WAS.product
    ansible.builtin.fetch:
      src: "{{ install_base }}/{{ twas_dir }}/properties/version/WAS.product"
      dest: "{{ logs_dir }}/{{ env_name }}/{{ ansible_fqdn }}/WAS.product"
      flat: yes

  - name: Read the product name from properties/version/WAS.product
    delegate_to: localhost
    community.general.xml:
      path: "{{ logs_dir }}/{{ env_name }}/{{ ansible_fqdn }}/WAS.product"
      xpath: /product
      content: attribute
    register: product

  - name: Set twas_Product fact
    ansible.builtin.set_fact:
      twas_Product: "{{ product.matches[0]['product']['name'] }}"

  - name: Print twas_Product debug
    ansible.builtin.debug:
      var: "{{ twas_Product }}"

  - name: Read the product version from properties/version/WAS.product
    delegate_to: localhost
    community.general.xml:
      path: "{{ logs_dir }}/{{ env_name }}/{{ ansible_fqdn }}/WAS.product"
      xpath: /product/version
      content: text
    register: version

  - name: Set twas_Version fact
    ansible.builtin.set_fact:
      twas_Version: '{{ version.matches[0]["version"] }}'

  - name: Print twas_Version debug
    ansible.builtin.debug:
      var: "{{ twas_Version }}"

  - name: Read the level from properties/version/WAS.product
    delegate_to: localhost
    community.general.xml:
      path: "{{ logs_dir }}/{{ env_name }}/{{ ansible_fqdn }}/WAS.product"
      xpath: /product/build-info
      content: attribute
    register: product_level

  - name: Set twas_Build_Level fact
    ansible.builtin.set_fact:
      twas_Build_Level: '{{ product_level.matches[0]["build-info"]["level"] }}'

  - name: Print twas_Build_Level debug
    ansible.builtin.debug:
      var: "{{ twas_Build_Level }}"

  - name: Write tWAS version_level to json file
    delegate_to: localhost
    ansible.builtin.template:
      src: version_level.json.j2
      dest: "{{ logs_dir }}/{{ env_name }}/{{ ansible_fqdn }}/{{ version_level_json_file }}"
      mode: '0444'

  - name: WebSphere VersionInfo
    ansible.builtin.shell: "{{ install_base }}/{{ twas_dir }}/bin/versionInfo{{ ext }} -ifixDetail"
    register: tversions

  - name: Size of stdout_lines
    delegate_to: localhost
    ansible.builtin.set_fact:
      max_counter: "{{ tversions.stdout_lines | length }}"

  - name: Create dict with tWAS version(s)
    ansible.builtin.set_fact:
      twas_version: "{{ twas_version | default({}) | combine( { item: tversions.stdout_lines[item | int] }, recursive=True, list_merge='append' ) }}"
    with_sequence: 'start=0 end={{ max_counter | int - 1 }}'

  - name: New dict twas_version
    ansible.builtin.set_fact:
      versions: "{{{ ansible_fqdn : twas_version }}}"

  - name: Write tWAS versionInfo to json file
    delegate_to: localhost
    ansible.builtin.copy:
      content: "{{ versions | to_nice_json( sort_keys=false ) }}"
      dest: "{{ logs_dir }}/{{ env_name }}/{{ ansible_fqdn }}/{{ versioninfo_json_file }}"
      mode: '0444'
  
- name: check if AppClient installed
  ansible.builtin.stat:
    path: "{{ install_base }}/{{ app_dir }}/bin/versionInfo{{ ext }}"
  register: isapp

- name: AppClient versions
  when: isapp.stat.exists
  block:

  - name: Fetch properties/version/APPCLIENT.product
    ansible.builtin.fetch:
      src: "{{ install_base }}/{{ twas_dir }}/properties/version/APPCLIENT.product"
      dest: "{{ logs_dir }}/{{ env_name }}/{{ ansible_fqdn }}/APPCLIENT.product"
      flat: yes

  - name: Read the product name from properties/version/WAS.product
    delegate_to: localhost
    community.general.xml:
      path: "{{ logs_dir }}/{{ env_name }}/{{ ansible_fqdn }}/APPCLIENT.product"
      xpath: /product
      content: attribute
    register: product

  - name: Set twas_Product fact
    ansible.builtin.set_fact:
      twas_Product: "{{ product.matches[0]['product']['name'] }}"

  - name: Print twas_Product debug
    ansible.builtin.debug:
      var: "{{ twas_Product }}"

  - name: Read the product version from properties/version/APPCLIENT.product
    delegate_to: localhost
    community.general.xml:
      path: "{{ logs_dir }}/{{ env_name }}/{{ ansible_fqdn }}/APPCLIENT.product"
      xpath: /product/version
      content: text
    register: version

  - name: Set twas_Version fact
    ansible.builtin.set_fact:
      twas_Version: '{{ version.matches[0]["version"] }}'

  - name: Print twas_Version debug
    ansible.builtin.debug:
      var: "{{ twas_Version }}"

  - name: Read the level from properties/version/APPCLIENT.product
    delegate_to: localhost
    community.general.xml:
      path: "{{ logs_dir }}/{{ env_name }}/{{ ansible_fqdn }}/APPCLIENT.product"
      xpath: /product/build-info
      content: attribute
    register: product_level

  - name: Set twas_Build_Level fact
    ansible.builtin.set_fact:
      twas_Build_Level: '{{ product_level.matches[0]["build-info"]["level"] }}'

  - name: Print twas_Build_Level debug
    ansible.builtin.debug:
      var: "{{ twas_Build_Level }}"

  - name: Write tWAS version_level to json file
    delegate_to: localhost
    ansible.builtin.template:
      src: version_level.json.j2
      dest: "{{ logs_dir }}/{{ env_name }}/{{ ansible_fqdn }}/app_{{ version_level_json_file }}"
      mode: '0444'

  - name: Merge the Server / Appclient json ( combined )
    delegate_to: localhost
    ansible.builtin.copy:
      content: "{{ lookup('ansible.builtin.file', '{{ logs_dir }}/{{ env_name }}/{{ ansible_fqdn }}/{{ version_level_json_file }}') | from_json | ansible.builtin.combine(lookup('ansible.builtin.file', '{{ logs_dir }}/{{ env_name }}/{{ ansible_fqdn }}/app_{{ version_level_json_file }}') | from_json, recursive=True, list_merge='append' )}}"
      dest: "{{ logs_dir }}/{{ env_name }}/{{ ansible_fqdn }}/{{ version_level_json_file }}"
      mode: '0444'

  - name: AppClient version
    ansible.builtin.shell: "{{ install_base }}/{{ app_dir }}/bin/versionInfo{{ ext }} -ifixDetail"
    register: appVersionOutput

  - name: Size of stdout_lines
    delegate_to: localhost
    ansible.builtin.set_fact:
      max_counter: "{{ appVersionOutput.stdout_lines | length }}"

  - name: Create dict with tWAS version(s)
    ansible.builtin.set_fact:
      app_version: "{{ app_version | default({}) | combine( { item: appVersionOutput.stdout_lines[item | int] }, recursive=True, list_merge='append' ) }}"
    with_sequence: 'start=0 end={{ max_counter | int - 1 }}'

  - name: New dict app_version
    ansible.builtin.set_fact:
      versions: "{{ { ansible_fqdn : app_version } }}"

  - name: Write AppClient versionInfo to json file
    delegate_to: localhost
    ansible.builtin.copy:
      content: "{{ versions | to_nice_json( sort_keys=false ) }}"
      dest: "{{ logs_dir }}/{{ env_name }}/{{ ansible_fqdn }}/{{ app_versioninfo_json_file }}"
      mode: '0444'

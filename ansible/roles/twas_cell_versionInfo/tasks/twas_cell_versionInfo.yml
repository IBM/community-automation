---
- name: check if tWAS installed
  ansible.builtin.stat:
    path: "{{ install_base }}/{{ twas_dir }}/bin/versionInfo{{ ext }}"
  register: istwas

- name: tWAS versions
  when: istwas.stat.exists
  block:

  - name: WebSphere VersionInfo
    ansible.builtin.shell: "{{ install_base }}/{{ twas_dir }}/bin/versionInfo{{ ext }} -ifixDetail"
    register: tversions

  - name: Fetch properties/version/WAS.product
    ansible.builtin.fetch:
      src: "{{ install_base }}/{{ twas_dir }}/properties/version/WAS.product"
      dest: "{{ logs_dir }}/{{ env_name }}/{{ ansible_fqdn }}/WAS.product"
      flat: yes

  - name: Read the release / version from properties/version/WAS.product
    delegate_to: localhost
    community.general.xml:
      path: "{{ logs_dir }}/{{ env_name }}/{{ ansible_fqdn }}/WAS.product"
      xpath: /product
      content: attribute
    register: xml_output

  - name: Show xml attribute value
    ansible.builtin.debug:
      var: xml_output.matches

  - name: Create version dir
    delegate_to: localhost
    ansible.builtin.file:
      path: "{{ logs_dir }}/{{ env_name }}/{{ ansible_fqdn }}"
      state: directory
      mode: '0755'

  - name: Size of stdout_lines
    delegate_to: localhost
    ansible.builtin.set_fact:
      max_counter: "{{ tversions.stdout_lines | length }}"

  - name: Create dict with tWAS version(s)
    ansible.builtin.set_fact:
      twas_version: "{{ twas_version | default({}) | combine( { item: tversions.stdout_lines[item | int] }, recursive=True, list_merge='append' ) }}"
    with_sequence: 'start=0 end={{ max_counter | int - 1 }}'

  - name: New dict twas_version
    ansible.builtin.set_fact:
      versions: "{{{ ansible_fqdn : twas_version }}}"

  # - name: New dict append_this
  #   delegate_to: localhost
  #   ansible.builtin.debug:
  #     msg: "{{ versions }}"

  - name: Write tWAS versionInfo to json file
    delegate_to: localhost
    ansible.builtin.copy:
      content: "{{ versions | to_nice_json( sort_keys=false ) }}"
      dest: "{{ logs_dir }}/{{ env_name }}/{{ ansible_fqdn }}/{{ versioninfo_json_file }}"
      mode: '0444'
  
- name: check if AppClient installed
  ansible.builtin.stat:
    path: "{{ install_base }}/{{ app_dir }}/bin/versionInfo{{ ext }}"
  register: isapp

- name: AppClient versions
  when: isapp.stat.exists
  block:
  - name: AppClient version
    ansible.builtin.shell: "{{ install_base }}/{{ app_dir }}/bin/versionInfo{{ ext }} -ifixDetail"
    register: appVersionOutput

  # - name: tWAS Application Client versionsInfo output
  #   ansible.builtin.debug:
  #     msg: "{{ appVersionOutput.stdout_lines }}"

  - name: Size of stdout_lines
    delegate_to: localhost
    ansible.builtin.set_fact:
      max_counter: "{{ appVersionOutput.stdout_lines | length }}"

  - name: Create dict with tWAS version(s)
    ansible.builtin.set_fact:
      app_version: "{{ app_version | default({}) | combine( { item: appVersionOutput.stdout_lines[item | int] }, recursive=True, list_merge='append' ) }}"
    with_sequence: 'start=0 end={{ max_counter | int - 1 }}'

  - name: New dict app_version
    ansible.builtin.set_fact:
      versions: "{{{ ansible_fqdn : app_version }}}"

  # - name: New dict append_this
  #   delegate_to: localhost
  #   ansible.builtin.debug:
  #     msg: "{{ versions }}"

  - name: Write AppClient versionInfo to json file
    delegate_to: localhost
    ansible.builtin.copy:
      content: "{{ versions | to_nice_json( sort_keys=false ) }}"
      dest: "{{ logs_dir }}/{{ env_name }}/{{ ansible_fqdn }}/{{ app_versioninfo_json_file }}"
      mode: '0444'

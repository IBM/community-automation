---
- name: Create  install directory
  file:
    path: "install/{{ CLUSTER_NAME }}"
    state: directory
    mode: '0755'

- name: create install-config
  template:
    src: "{{ cloud }}-install-config.template.j2"
    dest: "install/{{ CLUSTER_NAME }}/install-config.yaml"
    backup: false
  register: template_results

- name: set logfile fact
  set_fact:
    logfile: "{{ CLUSTER_NAME }}_details.log"

- name: Provision cluster
  shell: "openshift-install create cluster --dir=install/{{ CLUSTER_NAME }} 2>&1 | tee {{ logfile }}"
  args:
    executable: /bin/bash
  async: 3600
  poll: 0
  register: provision_results

- name: Wait for bootstrap complete
  shell: "cat install/{{ CLUSTER_NAME }}/.openshift_install.log"
  register: boot_results
  until: '"Bootstrap status: complete" | string in boot_results.stdout or "fail" in boot_results.stdout'
  retries: 40
  delay: 60
  failed_when: '"fail" in boot_results.stdout'

- name: Wait for install complete
  shell: "cat install/{{ CLUSTER_NAME }}/.openshift_install.log"
  register: install_results
  until: '"Install complete" in install_results.stdout or "fail" in install_results.stdout'
  retries: 60
  delay: 60
  failed_when: '"fail" in install_results.stdout'

- name: get admin userid
  shell:
    cmd: grep -i login "{{ logfile }}" | cut -d ' ' -f8 | cut -d\" -f2
  register: kubeuser

- name: get kubeadmin password
  shell:
    cmd: grep -i login "{{ logfile }}" | cut -d ' ' -f11 | cut -d\" -f2
  register: kubeadmin_pw

- name: get web console
  shell:
    cmd: grep -i web-console "{{ logfile }}" | cut -d ' ' -f7
  register: console_url

- name: Create new inventory host (ocp_provisioned_cluster)
  add_host:
    name: "{{ console_url.stdout.split('.')[2] }}"
    groups: "ocp_provisioned_cluster"
    ansible_connection: "local"
    ansible_python_interpreter: "/usr/bin/python3"
    kubeadmin_password: "{{ kubeadmin_pw.stdout }}"
    kubeadmin_user: "{{ kubeuser.stdout }}"
    ocp_api_url: "api.{{ console_url.stdout.split('.',2)[2] }}"
    cluster_name: "{{ console_url.stdout.split('.')[2] }}"
    admin_task: "provision"
  changed_when: false

---


- name: create ssh dir
  file:
    path: "{{ lookup('env','HOME')}}/.ssh"
    state: directory
    mode: '0700'
- name: create ssh dir
  file:
    path: "{{ lookup('env','HOME')}}/.ssh/known_hosts"
    state: touch
    mode: '0600'
  when: "fyre_modifyKnownHosts|bool == true"
- name: Ensure SSH Key
  openssh_keypair:
    path: "{{ lookup('env','HOME')}}/.ssh/id_rsa"
    regenerate: never

- name: Check VM Existance
  no_log: "{{ noLog }}"
  uri:
    url: "{{fyre_clusterstatusurl}}"
    method: "GET"
    user: "{{ fyreuser }}"
    password: "{{ fyreapikey }}"
    force_basic_auth: True
    validate_certs: False
    return_content: True
  register: clusterStatus
  changed_when: false
  failed_when: false

- name: clusterStatus.content
  debug:
    msg: "{{ clusterStatus.content }}"
    verbosity: 3
- name: clusterStatus.content|from_json
  debug:
    msg: "{{ clusterStatus.content|from_json }}"
    verbosity: 3
- name: from_json flatten to_paths
  debug:
    msg: "{{ lookup('ansible.utils.to_paths', clusterStatus.content|from_json) }}"
    verbosity: 3
- name: from_json status
  debug:
    msg: "{{ clusterStatus.content|from_json|json_query('*[0].status') }}"
    verbosity: 3
- set_fact:
    fyre_status_list: "{{ clusterStatus.content|from_json|json_query('*[0].status') }}"
- set_fact:
    fyre_status: "{{ fyre_status_list[0] }}"
- name: status fact
  debug:
    msg: "{{ fyre_status }}"
    verbosity: 3

- name: Create Fyre VM
  #when: fyre_status not in 'deployed'
  when: fyre_status not in 'deployed'
  block:
  #START BLOCK
  - name: cluster not found
    debug:
      msg: "Cluster was not found so creating new cluster called '{{ clusterName }}'"

  - name: Create Fyre stack
    uri:
      url: "{{fyre_buildurl}}"
      method: "POST"
      user: "{{ fyreuser }}"
      password: "{{ fyreapikey }}"
      force_basic_auth: True
      validate_certs: False
      return_content: yes
      body_format: "json"
      body: "{{ lookup('template', 'vm_request.json.j2') }}" 
    register: buildstatus

  # this is used in fully automated setups - wait x mins for fyre to provision vm
  - name: wait x mins for fyre to provision vm
    pause:
      minutes: 2

  - name: buildstatus.content
    debug:
      msg: "{{ buildstatus.content }}"
  - name: buildstatus.content|to_json
    debug:
      msg: "{{ buildstatus.content|to_json }}"
  - name: buildstatus.content|from_json
    debug:
      msg: "{{ buildstatus.content|from_json }}"
  - name: to_paths from_json
    debug:
      msg: "{{ lookup('ansible.utils.to_paths', buildstatus.content|from_json) }}"
  - name: to_paths to_json
    debug:
      msg: "{{ lookup('ansible.utils.to_paths', buildstatus.content|to_json) }}"
  - name: status
    debug:
      msg: "{{ buildstatus.content|from_json|json_query('*[0].request_id') }}"

  - name: get Fyre request status
    uri:
      url: "{{ fyre_requeststatusurl }}{{ buildstatus.content|from_json|json_query('*[0].request_id') }}"
      method: "POST"
      user: "{{ fyreuser }}"
      password: "{{ fyreapikey }}"
      force_basic_auth: True
      validate_certs: False
      return_content: yes
      body_format: json
    no_log: "{{ noLog }}"
    retries: "{{ fyre_requestRetries }}"
    delay: 5
    register: fyreStatus
    until: (fyreStatus.content|from_json|json_query('*[0].status')) == 'error' or 
           (fyreStatus.content|from_json|json_query('*[0].status')) == 'completed'

  - name: check Fyre request status
    fail:
      msg: "Fyre reqeust for cluster {{ clusterName }} has failed:\n{{fyreStatus.content|from_json }} | default('No reason given')}}"
    when: (fyreStatus.content|from_json|json_query('*[0].status')) == 'error'
  #END BLOCK

- name: check that fyre cluster have a deployed status
  # no_log: "{{ noLog }}"
  uri:
    url: "{{fyre_clusterstatusurl}}"
    method: GET
    user:  "{{ fyreuser }}"
    password: "{{ fyreapikey }}"
    force_basic_auth: True
    validate_certs: False
    return_content: yes
      #body_format: json
  changed_when: false
  register: clusterStatus
  until: (clusterStatus.status == 200) and 
     (clusterStatus.content|from_json|json_query('*[0].status[0]')) == 'deployed' or 
     (clusterStatus.content|from_json|json_query('*[0].status[0]')) == 'error'
  retries: 600
  delay: 20

- name: check for error status after loop check
  fail:
   msg:
   - "{{clusterStatus.content|from_json }}"
  when:
  - (clusterStatus.content|from_json|json_query('*[0].status')) == 'error'

- name: remove new host from localhost known_hosts ip
  no_log: "{{ noLog }}"
  vars: 
    publicip: "{{clusterStatus.content|from_json }}.get('publicip')}}"
  command: "ssh-keygen -R {{ publicip }}"
  ignore_errors: True
  when: "fyre_modifyKnownHosts|bool == true"
- name: remove new host from localhost known_hosts
  no_log: "{{ noLog }}"
  command: "ssh-keygen -R {{ ember }}"
  ignore_errors: True
  when: "fyre_modifyKnownHosts|bool == true"
- name: remove new host from localhost known_hosts fqdn
  no_log: "{{ noLog }}"
  command: "ssh-keygen -R {{ emberFQDN }}" 
  ignore_errors: True
  when: "fyre_modifyKnownHosts|bool == true"

- name: check the host for a active ssh
  command: 'ssh -o PasswordAuthentication=no -o StrictHostKeyChecking=no root@{{ emberFQDN }} /usr/bin/true'
  retries: "{{ fyre_sshRetries }}"
  delay: 5
  register: result
  until: result.rc == 0

# somewhat hard coded here
- name: add host to known_hosts
  shell: 'ssh-keyscan -H {{ emberFQDN }} >> ~/.ssh/known_hosts'
  when: "fyre_modifyKnownHosts|bool == true"

- add_host:
   name: "{{ emberFQDN }}"
   groups: "{{ target_group }}"
   ansible_user: "{{ target_user|default('root') }}"
   clusterName: "{{ clusterName }}"
   stackName: "{{ clusterName }}"
  args: "{{ extra_props| default(omit) }}"
  changed_when: false
  when: "fyre_addAnsibleHost|bool == true"

- set_fact:
    clusterName: "{{ clusterName }}"
    emberFQDN: "{{ emberFQDN }}"
  when: "fyre_addAnsibleHost|bool == true"
- name: Update existing host with new facts
  set_fact:
    clusterName: "{{ clusterName }}"
    stackName: "{{ clusterName }}"
    ansible_user: "{{ target_user|default(omit) }}"
  args: "{{ extra_props| default(omit) }}"
  no_log: True
  changed_when: false
  when: "fyre_addAnsibleHost|bool == false"

---

- name: create ssh dir
  file:
    path: "{{ lookup('env','HOME')}}/.ssh"
    state: directory
    mode: '0700'
- name: create ssh dir
  file:
    path: "{{ lookup('env','HOME')}}/.ssh/known_hosts"
    state: touch
    mode: '0600'
  when: "fyre_modifyKnownHosts|bool == true"
- name: Ensure SSH Key
  openssh_keypair:
    path: "{{ lookup('env','HOME')}}/.ssh/id_rsa"
    regenerate: never

- name: Set a default for when there is no cluster
  set_fact:
    no_cluster:
      name: "{{ clusterName }}"
      status: 'absent'

- name: Check to see if a cluster exists with the name we are requesting
  uri:
    url: "{{ fyre_apiurl }}?operation=query&request=showclusters&cluster_name={{ clusterName }}"
    method: GET
    user:  "{{ fyreuser }}"
    validate_certs: false
    password: "{{ fyreapikey }}"
    force_basic_auth: true
    return_content: true
  changed_when: false
  register: cluster_status_response
  delay: 15
  retries: 20
  until: >
    (cluster_status_response.status != -1) and
    ((cluster_status_response.content | from_json)['clusters'] | 
      default([no_cluster]) | 
      selectattr('name','==',clusterName) | 
      map(attribute='status') | 
      first) not in ['pending delete', 'deleting', 'pendingValidation']

- name: Set cluster_status_json fact
  set_fact:
    cluster_status_json: "{{ item }}"
  loop: "{{ (cluster_status_response.content | from_json)['clusters'] | default([]) }}"
  when: item.name == clusterName

- name: Set fact for check that cluster already exists
  set_fact:
    cluster_exists: "{{ cluster_status_json is defined }}"
    cluster_status: "{{ cluster_status_json['status'] | default('unknown') }}"

- name: Check for error
  assert:
    that: cluster_status != 'error'
  when: cluster_exists

- name: Print a message about the state of the cluster
  debug:
    msg: "{{ 'Cluster ' + clusterName + ((' exists (' + cluster_status + ').') if cluster_exists else ' does not exist.') }}"

- name: Assert that cluster is not being deleted
  assert:
    that: cluster_status != 'deleting'
  when: cluster_exists

- when: not cluster_exists
  block:

  - name: Create Fyre stack
    uri:
      url: "{{ fyre_apiurl }}?operation=build"
      method: POST
      user: "{{ fyreuser }}"
      password: "{{ fyreapikey }}"
      force_basic_auth: True
      validate_certs: False
      return_content: yes
      body_format: "json"
      body: "{{ lookup('template', 'vm_request.json.j2') }}" 
    register: buildstatus

  # this is used in fully automated setups - wait x mins for fyre to provision vm
  - name: wait x mins for fyre to provision vm
    pause:
      minutes: 2

  - name: Set fact for response
    set_fact:
      response_json: "{{ buildstatus.content | from_json }}"

  - name: Set fact for request_id
    set_fact:
      request_id: "{{ response_json['request_id'] }}"

  - name: Check for errors
    fail: msg="cluster build request failed"
    when: response_json['status'] not in ['submitted', 'success']

- when: cluster_exists and cluster_status == 'building'
  block:

  - name: Look up our request id
    uri:
      url: "{{ fyre_apiurl }}?operation=query&request=showrequests"
      method: GET
      user:  "{{ fyreuser }}"
      validate_certs: false
      password: "{{ fyreapikey }}"
      force_basic_auth: true
      return_content: true
    changed_when: false
    register: request_status_response

  - name: Set request_id fact
    set_fact:
      request_id: "{{ item.id }}"
    loop: "{{ (request_status_response.content | from_json)['request'] }}"
    when: item.cluster_name == clusterName


- when: (request_id | default(-1)) != -1
  block:

    - name: Wait until cluster is finished building
      uri:
        url: "{{ fyre_apiurl }}?operation=query&request=showrequests&request_id={{ request_id | string }}"
        method: GET
        user:  "{{ fyreuser }}"
        validate_certs: false
        password: "{{ fyreapikey }}"
        force_basic_auth: true
        return_content: true
      changed_when: false
      register: request_status_response
      delay: 20
      retries: 600
      until: (request_status_response.status == 200) and request_status_response.content is defined and not (request_status_response.content | from_json)['request'][0].status is match('.*building.*')

    - name: Check for errors
      fail: msg="cluster build request error"
      when: (request_status_response.content | from_json)['request'] | map(attribute='status') | unique | difference(['completed','deployed']) | length > 0

    - name: Fetch the cluster status
      uri:
        url: "{{ fyre_apiurl }}?operation=query&request=showclusters"
        method: GET
        user:  "{{ fyreuser }}"
        validate_certs: false
        password: "{{ fyreapikey }}"
        force_basic_auth: true
        return_content: true
      changed_when: false
      register: cluster_status_response
      until: cluster_status_response.status != -1

    - name: Set cluster_status_json fact
      set_fact:
        cluster_status_json: "{{ item }}"
      loop: "{{ (cluster_status_response.content | from_yaml)['clusters'] }}"
      when: item.name == clusterName

    - name: Set cluster_status fact
      set_fact:
        cluster_status: "{{ cluster_status_json['status'] | default('error') }}"

    - name: Check for error
      assert:
        that: cluster_status != 'error'

- name: Fetch the cluster details
  uri:
    url: "{{ fyre_apiurl }}?operation=query&request=showclusterdetails&cluster_name={{ clusterName }}"
    method: GET
    user:  "{{ fyreuser }}"
    validate_certs: false
    password: "{{ fyreapikey }}"
    force_basic_auth: true
    return_content: true
  changed_when: false
  register: cluster_details_response
  until: cluster_details_response.status != -1

- name: Set fact for cluster_details_json
  set_fact:
    cluster_details_json: "{{ (cluster_details_response.content | from_json)[clusterName] }}"


- name: cluster_details_response.content
  debug:
    msg: "{{ cluster_details_response.content|from_json }}"
    verbosity: 3

- name: remove new host from localhost known_hosts ip
  no_log: "{{ noLog }}"
  vars: 
    publiciplist: "{{ cluster_details_response.content|from_json|json_query('*[0].publicip') }}"
    publicip: "{{ publiciplist[0] }}"
  command: "ssh-keygen -R {{ publicip }}"
  ignore_errors: True
  when: "fyre_modifyKnownHosts|bool == true"
- name: remove new host from localhost known_hosts
  no_log: "{{ noLog }}"
  command: "ssh-keygen -R {{ ember }}"
  ignore_errors: True
  when: "fyre_modifyKnownHosts|bool == true"
- name: remove new host from localhost known_hosts fqdn
  no_log: "{{ noLog }}"
  command: "ssh-keygen -R {{ emberFQDN }}" 
  ignore_errors: True
  when: "fyre_modifyKnownHosts|bool == true"

- name: check the host for a active ssh
  command: 'ssh -o PasswordAuthentication=no -o StrictHostKeyChecking=no root@{{ emberFQDN }} /usr/bin/true'
  retries: "{{ fyre_sshRetries }}"
  delay: 5
  register: result
  until: result.rc == 0

# somewhat hard coded here
- name: add host to known_hosts
  shell: 'ssh-keyscan -H {{ emberFQDN }} >> ~/.ssh/known_hosts'
  when: "fyre_modifyKnownHosts|bool == true"

- name: add_host info
  debug:
    msg: 
    - "{{ emberFQDN }}"
    - "{{ target_group }}"
    - "{{ target_user|default('root') }}"
    - "{{ clusterName }}"
    - "{{ clusterName }}"
    - "{{ fyre_addAnsibleHost }}"
    verbosity: 3

- add_host:
   name: "{{ emberFQDN }}"
   groups: "{{ target_group }}"
   ansible_user: "{{ target_user|default('root') }}"
   clusterName: "{{ clusterName }}"
   stackName: "{{ clusterName }}"
  args: "{{ extra_props| default(omit) }}"
  changed_when: false
  when: "fyre_addAnsibleHost|bool == true"

- set_fact:
    clusterName: "{{ clusterName }}"
    emberFQDN: "{{ emberFQDN }}"
  when: "fyre_addAnsibleHost|bool == true"
- name: Update existing host with new facts
  set_fact:
    clusterName: "{{ clusterName }}"
    stackName: "{{ clusterName }}"
    ansible_user: "{{ target_user|default(omit) }}"
  no_log: True
  changed_when: false
  when: "fyre_addAnsibleHost|bool == false"

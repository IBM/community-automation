---
- name: Stop tWAS Managed Liberty servers
  when: profile_type == 'dmgr'
  block:
    - name: Retrieve signers
      ansible.builtin.shell: "{{ install_base }}/{{ twas_dir }}/profiles/{{ profile_name }}/bin/retrieveSigners{{ ext }} {{ cell_trust }} ClientDefaultTrustStore -autoAcceptBootstrapSigner -username {{ twas_username }} -password {{ twas_password }}"
      register: retrieveSignersOutput
      failed_when: ( retrieveSignersOutput.rc not in [ 0, 3 ] )
    - name: retrieveSignersOutput
      debug:
        msg: "{{ retrieveSignersOutput.stdout_lines }}"

# bin/wsadmin.sh -username persona1 -password ppersona1 -c "AdminTask.listServers('[-serverType MANAGED_LIBERTY_SERVER -nodeName node1]')"
# WASX7209I: Connected to process "dmgr" on node dmgr using SOAP connector;  The type of process is: DeploymentManager
# u'lib11(cells/ndcell/nodes/node1/servers/lib11|server.xml)\nlib1(cells/ndcell/nodes/node1/servers/lib1|server.xml)'

    - name: List the running ManagedLibertyServer
      ansible.builtin.shell: "{{ install_base }}/{{ twas_dir }}/profiles/{{ profile_name }}/bin/wsadmin{{ ext }} -username {{ twas_username }} -password {{ twas_password }} -c 'AdminTask.listServers('[-serverType MANAGED_LIBERTY_SERVER -nodeName node1]')'"
      register: serverListOutput

    - name: Find ManagedLibertyServers
      set_fact:
        mls: "{{ (serverListOutput.stdout|regex_replace('^.*?(server\\.xml)', '\\1'))|regex_replace('^.*?(server\\.xml)', '\\1')|split('|', 1) }}"

    - name: Debug server_xml_parts
      debug:
        var: mls

    - name: Stop ManagedLibertyServer
      ansible.builtin.shell: "{{ install_base }}/{{ twas_dir }}/profiles/{{ profile_name }}/bin/wsadmin{{ ext }} -username {{ twas_username }} -password {{ twas_password }} -c 'AdminControl.stopServer("lib1", "{{ item }}")'"
      register: stopMlsOutput
      failed_when: ( stopMlsOutput.rc not in [ 0,246 ] )
      with_items: '{{ serverListOutput.stdout_lines }}'

    - name: ManagedLibertyServer stop output
      ansible.builtin.debug:
        msg: "rc={{ item.rc }}"
      with_items: "{{ stopMlsOutput.results }}"
      loop_control:
        label: "{{ item.stdout }}"
      failed_when: 
      - '" Error " in item.stdout'
  rescue:
    - ansible.builtin.include_role:
        name: linux_kill_process
      vars:
        linux_kill_process: "{{ linux_kill_process }}"

---

- name: Any logs?
  ansible.builtin.stat:
    path: "{{ install_base }}/{{ twas_dir }}/profiles/{{ profile_name }}/logs"
  register: islogs

- name: Log archive logic
  when: islogs.stat.exists == True
  block:
  - name: Archive the logs dir to fetch
    community.general.archive:
      path:
      - "{{ install_base }}/{{ twas_dir }}/profiles/{{ profile_name }}/logs/*" # needs * to allow the exclude_path to work
      exclude_path:
      - "{{ install_base }}/{{ twas_dir }}/profiles/{{ profile_name }}/logs/service"
      exclusion_patterns:
      - '*.zip'
      - '*.tar'
      - '*.gz'
      - '*.lck'
      dest: logs.zip
      format: zip

  - name: Create local logs dir
    delegate_to: localhost
    ansible.builtin.file:
      path: "{{ logs_dir }}/{{ env_name }}/{{ ansible_fqdn }}/{{ profile_name }}/logs/"
      state: directory

  - name: Fetch the twas log archive
    ansible.builtin.fetch:
      flat: true
      src: logs.zip
      dest: "{{ logs_dir }}/{{ env_name }}/{{ ansible_fqdn }}/{{ profile_name }}/"

  - name: Unarchive the twas logs
    delegate_to: localhost
    ansible.builtin.unarchive:
      src: "{{ logs_dir }}/{{ env_name }}/{{ ansible_fqdn }}/{{ profile_name }}/logs.zip"
      dest: "{{ logs_dir }}/{{ env_name }}/{{ ansible_fqdn }}/{{ profile_name }}/logs/"
      remote_src: false

  - name: Remove logs.zip
    delegate_to: localhost
    ansible.builtin.file:
      path: "{{ logs_dir }}/{{ env_name }}/{{ ansible_fqdn }}/{{ profile_name }}/logs.zip"
      state: absent

  - name: Print local log/error directory location
    ansible.builtin.debug:
      msg: "{{ logs_dir }}/{{ env_name }}/{{ ansible_fqdn }}/{{ profile_name }}/logs"

  - name: Verbose GC log processing
    when: verboseGC
    block: 
      - name: Run the IBM verbosegc logic
        ansible.builtin.include_role:
          name: ibm_vbgc
        vars:
          vbgc_dir: "{{ logs_dir }}/{{ env_name }}/{{ ansible_fqdn }}/{{ profile_name }}/logs"
